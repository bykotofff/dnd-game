# backend/app/api/websocket.py

import json
import asyncio
import logging
from datetime import datetime
from typing import Dict, Any, Optional, List

from fastapi import APIRouter, WebSocket, WebSocketDisconnect, Depends, Query
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from app.core.database import get_db_session
from app.models.game import Game
from app.models.user import User
from app.models.character import Character
from app.models.campaign import Campaign
from app.services.ai_service import ai_service
from app.core.redis_client import redis_client

logger = logging.getLogger(__name__)
router = APIRouter()


class ConnectionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""

    def __init__(self):
        # game_id -> {user_id -> websocket}
        self.active_connections: Dict[str, Dict[str, WebSocket]] = {}
        # user_id -> game_id –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        self.user_to_game: Dict[str, str] = {}

    async def connect(self, websocket: WebSocket, game_id: str, user_id: str):
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∏–≥—Ä–µ"""
        await websocket.accept()

        if game_id not in self.active_connections:
            self.active_connections[game_id] = {}

        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_id in self.user_to_game:
            old_game_id = self.user_to_game[user_id]
            await self.disconnect(old_game_id, user_id)

        self.active_connections[game_id][user_id] = websocket
        self.user_to_game[user_id] = game_id

        logger.info(f"User {user_id} connected to game {game_id}")

    async def disconnect(self, game_id: str, user_id: str):
        """–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∏–≥—Ä—ã"""
        try:
            if game_id in self.active_connections and user_id in self.active_connections[game_id]:
                del self.active_connections[game_id][user_id]

                # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∏–≥—Ä—ã
                if not self.active_connections[game_id]:
                    del self.active_connections[game_id]

            if user_id in self.user_to_game:
                del self.user_to_game[user_id]

            logger.info(f"User {user_id} disconnected from game {game_id}")
        except Exception as e:
            logger.error(f"Error disconnecting user {user_id} from game {game_id}: {e}")

    async def send_personal_message(self, message: str, game_id: str, user_id: str):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            if game_id in self.active_connections and user_id in self.active_connections[game_id]:
                websocket = self.active_connections[game_id][user_id]
                await websocket.send_text(message)
        except Exception as e:
            logger.error(f"Error sending personal message to {user_id}: {e}")
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await self.disconnect(game_id, user_id)

    async def broadcast_to_game(self, message: str, game_id: str, exclude_user: str = None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ –∏–≥—Ä–µ"""
        if game_id not in self.active_connections:
            return

        disconnected_users = []

        for user_id, websocket in self.active_connections[game_id].items():
            if exclude_user and user_id == exclude_user:
                continue

            try:
                await websocket.send_text(message)
            except Exception as e:
                logger.error(f"Error broadcasting to user {user_id}: {e}")
                disconnected_users.append(user_id)

        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_id in disconnected_users:
            await self.disconnect(game_id, user_id)

    def get_connected_users(self, game_id: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∏–≥—Ä–µ"""
        if game_id in self.active_connections:
            return list(self.active_connections[game_id].keys())
        return []


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
manager = ConnectionManager()


class WebSocketMessage:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π"""

    def __init__(self, message_type: str, data: Dict[str, Any]):
        self.type = message_type
        self.data = data

    def to_json(self) -> str:
        return json.dumps({
            "type": self.type,
            "data": self.data
        })


async def get_user_from_token(token: str, db: AsyncSession) -> Optional[User]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É"""
    try:
        from app.api.auth import auth_service
        return await auth_service.get_current_user(token, db)
    except Exception as e:
        logger.warning(f"Failed to get user from token: {e}")
        return None


@router.websocket("/game/{game_id}")
async def websocket_game_endpoint(
        websocket: WebSocket,
        game_id: str,
        token: str = Query(...),
        db: AsyncSession = Depends(get_db_session)
):
    """WebSocket endpoint –¥–ª—è –∏–≥—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    user = None
    character_info = None
    character_name = None

    try:
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_from_token(token, db)
        if not user:
            logger.warning(f"Invalid token for WebSocket connection to game {game_id}")
            await websocket.close(code=1008, reason="Invalid token")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
        query = select(Game).where(Game.id == game_id)
        result = await db.execute(query)
        game = result.scalar_one_or_none()

        if not game:
            logger.warning(f"Game {game_id} not found for user {user.id}")
            await websocket.close(code=1008, reason="Game not found")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        user_id_str = str(user.id)
        players_list = game.players or []

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è
        campaign_query = select(Campaign).where(Campaign.id == game.campaign_id)
        campaign_result = await db.execute(campaign_query)
        campaign = campaign_result.scalar_one_or_none()

        is_creator = campaign and str(campaign.creator_id) == user_id_str
        is_player = user_id_str in players_list
        is_participant = campaign and user_id_str in (campaign.players or [])

        if not (is_player or is_creator or is_participant):
            logger.warning(f"Access denied for user {user.id} to game {game_id}")
            await websocket.close(code=1008, reason="Access denied")
            return

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∏–≥—Ä—É –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
        if not is_player and (is_creator or is_participant):
            if user_id_str not in players_list:
                players_list.append(user_id_str)
                game.players = players_list
                game.current_players += 1
                await db.commit()
                logger.info(f"Auto-added user {user.username} to game {game_id}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –∏–≥—Ä–æ–∫–∞
        character_info = await get_player_character_info(game, user_id_str, db)
        character_name = character_info.get('name', user.username) if character_info else user.username

        # –ü—Ä–∏–Ω–∏–º–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await manager.connect(websocket, game_id, user_id_str)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        welcome_message = WebSocketMessage("system", {
            "message": f"üé≠ {character_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!",
            "player_name": character_name,
            "user_id": user_id_str,
            "character_info": character_info,
            "timestamp": datetime.utcnow().isoformat()
        })

        await manager.broadcast_to_game(welcome_message.to_json(), game_id, exclude_user=user_id_str)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É
        game_state = await get_game_state_for_player(game, user, character_info, db)
        state_message = WebSocketMessage("game_state", game_state)
        await websocket.send_text(state_message.to_json())

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        while True:
            try:
                data = await websocket.receive_text()
                message_data = json.loads(data)
                message_type = message_data.get("type")

                if message_type == "chat_message":
                    await handle_chat_message(websocket, game_id, user_id_str, user, character_name, message_data, db)
                elif message_type == "player_action":
                    await handle_player_action(websocket, game_id, user_id_str, user, character_name, character_info, message_data, db)
                elif message_type == "dice_roll":
                    await handle_dice_roll(websocket, game_id, user_id_str, user, character_name, message_data, db)
                elif message_type == "ping":
                    await websocket.send_text(json.dumps({"type": "pong"}))
                else:
                    logger.warning(f"Unknown message type: {message_type}")

            except WebSocketDisconnect:
                logger.info(f"WebSocket disconnected for user {user.username} in game {game_id}")
                break
            except json.JSONDecodeError:
                logger.warning(f"Invalid JSON received from user {user.id}")
                continue
            except Exception as e:
                logger.error(f"Error handling WebSocket message: {e}")
                continue

    except Exception as e:
        logger.error(f"WebSocket error for game {game_id}: {e}")
    finally:
        if user:
            await manager.disconnect(game_id, str(user.id))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ —Å –∏–º–µ–Ω–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            if character_name:
                disconnect_message = WebSocketMessage("system", {
                    "message": f"üö™ {character_name} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É",
                    "player_name": character_name,
                    "user_id": str(user.id),
                    "timestamp": datetime.utcnow().isoformat()
                })
                await manager.broadcast_to_game(disconnect_message.to_json(), game_id)


async def get_player_character_info(game: Game, user_id: str, db: AsyncSession) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –∏–≥—Ä–æ–∫–∞"""
    try:
        if not game.player_characters:
            return None

        character_id = game.player_characters.get(user_id)
        if not character_id:
            return None

        query = select(Character).where(Character.id == character_id)
        result = await db.execute(query)
        character = result.scalar_one_or_none()

        if character:
            return {
                "id": str(character.id),
                "name": character.name,
                "race": character.race,
                "character_class": character.character_class,
                "level": character.level,
                "current_hit_points": character.current_hit_points,
                "max_hit_points": character.max_hit_points,
                "armor_class": character.armor_class,
                "abilities": {
                    "strength": character.strength,
                    "dexterity": character.dexterity,
                    "constitution": character.constitution,
                    "intelligence": character.intelligence,
                    "wisdom": character.wisdom,
                    "charisma": character.charisma,
                },
                "skills": character.skills or {},
                "background": character.background,
            }
    except Exception as e:
        logger.error(f"Error getting character info for user {user_id}: {e}")

    return None


async def get_game_state_for_player(game: Game, user: User, character_info: Optional[Dict], db: AsyncSession) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–∞—Ö –∏ –∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö
        players_info = {}
        if game.players:
            users_query = select(User).where(User.id.in_(game.players))
            users_result = await db.execute(users_query)
            users = {str(u.id): u for u in users_result.scalars().all()}

            for player_id in game.players:
                player_user = users.get(player_id)
                player_char_info = await get_player_character_info(game, player_id, db)

                players_info[player_id] = {
                    "user_id": player_id,
                    "username": player_user.username if player_user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫",
                    "character_name": player_char_info.get('name') if player_char_info else (player_user.username if player_user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"),
                    "character_info": player_char_info,
                    "is_online": True,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –æ–Ω–ª–∞–π–Ω
                    "is_current_user": player_id == str(user.id)
                }

        return {
            "game_id": str(game.id),
            "game_name": game.name,
            "status": game.status.value,
            "current_scene": game.current_scene,
            "players": players_info,
            "your_character": character_info,
            "turn_info": {
                "current_turn": game.current_turn,
                "current_player_index": game.current_player_index,
                "current_player_id": game.get_current_player(),
            },
            "world_state": dict(game.world_state) if game.world_state else {},
            "settings": dict(game.settings) if game.settings else {},
        }

    except Exception as e:
        logger.error(f"Error getting game state: {e}")
        return {
            "game_id": str(game.id),
            "game_name": game.name,
            "status": game.status.value,
            "players": {},
            "error": "Failed to load game state"
        }


async def handle_chat_message(websocket: WebSocket, game_id: str, user_id: str, user: User, character_name: str, data: Dict[str, Any], db: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ —Å –∏–º–µ–Ω–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    try:
        content = data.get("content", "").strip()
        if not content:
            return

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        chat_message = WebSocketMessage("chat_message", {
            "content": content,
            "sender_id": user_id,
            "sender_name": character_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            "sender_username": user.username,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ username –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ü–µ–ª–µ–π
            "timestamp": datetime.utcnow().isoformat(),
            "message_type": "chat"
        })

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤ –∏–≥—Ä–µ
        await manager.broadcast_to_game(chat_message.to_json(), game_id)

        logger.info(f"Chat message from {character_name} ({user.username}) in game {game_id}")

    except Exception as e:
        logger.error(f"Error handling chat message: {e}")


async def handle_player_action(websocket: WebSocket, game_id: str, user_id: str, user: User, character_name: str, character_info: Optional[Dict], data: Dict[str, Any], db: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–∞ —Å —É—á–µ—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    try:
        action = data.get("action", "").strip()
        if not action:
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–µ–π—Å—Ç–≤–∏–∏ —Å –∏–º–µ–Ω–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        action_message = WebSocketMessage("player_action", {
            "action": action,
            "player_id": user_id,
            "player_name": character_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            "character_info": character_info,
            "timestamp": datetime.utcnow().isoformat()
        })

        await manager.broadcast_to_game(action_message.to_json(), game_id)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ò–ò —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        try:
            query = select(Game).where(Game.id == game_id)
            result = await db.execute(query)
            game = result.scalar_one_or_none()

            if game:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
                context = {
                    "game_name": game.name,
                    "current_scene": game.current_scene,
                    "player_action": action,
                    "player_name": character_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                    "player_username": user.username,
                    "character_info": character_info,
                    "game_id": game_id
                }

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                asyncio.create_task(handle_ai_response_with_character(
                    game_id, action, context, character_name, character_info, user_id
                ))

        except Exception as ai_error:
            logger.warning(f"Failed to trigger AI response: {ai_error}")

    except Exception as e:
        logger.error(f"Error handling player action: {e}")


async def handle_ai_response_with_character(game_id: str, player_action: str, context: Dict, character_name: str, character_info: Optional[Dict], user_id: str):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò —Å —É—á–µ—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    try:
        logger.info(f"Starting AI response with character data for {character_name}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health AI —Å–µ—Ä–≤–∏—Å–∞
        ai_health = await ai_service.health_check()
        if not ai_health:
            logger.warning("AI service is not available")
            await send_fallback_ai_response(game_id, player_action, character_name)
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if character_info:
            dice_analysis = await ai_service.analyze_player_action_with_character(
                action=player_action,
                character_data=character_info,
                game_context=context,
                party_data=[]  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ä—Ç–∏–∏
            )
        else:
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
            dice_analysis = await ai_service.analyze_player_action(
                action=player_action,
                character_data={"name": character_name, "class": "Fighter"},
                current_situation=context.get('current_scene', 'Unknown situation')
            )

        logger.info(f"Dice analysis result for {character_name}: {dice_analysis}")

        # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±—Ä–æ—Å–æ–∫
        if dice_analysis.get("requires_roll", False):
            await request_dice_roll_with_character(game_id, dice_analysis, character_name, character_info, player_action)
            return

        # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ò–ò —Å —É—á–µ—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if character_info:
            ai_response = await ai_service.generate_character_aware_response(
                player_action=player_action,
                character_data=character_info,
                game_context=context,
                party_data=[],
                recent_messages=[]
            )
        else:
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
            ai_response = await ai_service.generate_dm_response(
                game_id=game_id,
                player_action=player_action,
                game_context=context,
                character_sheets=[character_info] if character_info else [],
                recent_messages=[]
            )

        if not ai_response:
            ai_response = f"ü§ñ *–ò–ò –ú–∞—Å—Ç–µ—Ä –∑–∞–¥—É–º–∞–ª—Å—è –Ω–∞–¥ –¥–µ–π—Å—Ç–≤–∏–µ–º {character_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ!*"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò
        ai_msg = WebSocketMessage("ai_response", {
            "message": ai_response,
            "sender_name": "–ò–ò –ú–∞—Å—Ç–µ—Ä",
            "timestamp": datetime.utcnow().isoformat(),
            "in_response_to": player_action,
            "responding_to_player": character_name  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        })

        await manager.broadcast_to_game(ai_msg.to_json(), game_id)
        logger.info(f"AI response sent for action by {character_name}")

    except Exception as e:
        logger.error(f"Error in AI response with character: {e}", exc_info=True)
        await send_fallback_ai_response(game_id, player_action, character_name)


async def request_dice_roll_with_character(game_id: str, dice_analysis: Dict, character_name: str, character_info: Optional[Dict], original_action: str):
    """–ó–∞–ø—Ä–æ—Å –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤ —Å —É—á–µ—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    try:
        roll_type = dice_analysis.get("roll_type", "–ø—Ä–æ–≤–µ—Ä–∫–∞_–Ω–∞–≤—ã–∫–∞")
        ability_or_skill = dice_analysis.get("ability_or_skill", "–≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ")
        dc = int(dice_analysis.get("suggested_dc", 15))
        advantage_disadvantage = dice_analysis.get("advantage_disadvantage", "–æ–±—ã—á–Ω–æ")

        # –í—ã—á–∏—Å–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å —É—á–µ—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        modifier = 0
        if character_info:
            modifier = ai_service._calculate_modifier(character_info, ability_or_skill)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
        await save_pending_roll_check(game_id, character_name, {
            "roll_type": roll_type,
            "ability_or_skill": ability_or_skill,
            "dc": dc,
            "modifier": modifier,
            "advantage_disadvantage": advantage_disadvantage,
            "original_action": original_action,
            "character_info": character_info
        })

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—Ä–æ—Å–æ–∫
        skill_display = ability_or_skill.title()
        modifier_text = f"+{modifier}" if modifier > 0 else str(modifier) if modifier < 0 else ""

        roll_request_msg = WebSocketMessage("dice_roll_request", {
            "message": f"üé≤ **{character_name}** –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É: **{skill_display}**\n\n"
                       f"–ë—Ä–æ—Å—å—Ç–µ d20{modifier_text} (–°–ª–æ–∂–Ω–æ—Å—Ç—å: {dc})\n"
                       f"–î–µ–π—Å—Ç–≤–∏–µ: *{original_action}*",
            "player_name": character_name,
            "roll_type": roll_type,
            "skill": ability_or_skill,
            "dc": dc,
            "modifier": modifier,
            "advantage": advantage_disadvantage == "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ",
            "disadvantage": advantage_disadvantage == "–ø–æ–º–µ—Ö–∞",
            "timestamp": datetime.utcnow().isoformat()
        })

        await manager.broadcast_to_game(roll_request_msg.to_json(), game_id)
        logger.info(f"Dice roll requested for {character_name}: {skill_display} DC{dc}")

    except Exception as e:
        logger.error(f"Error requesting dice roll: {e}")


async def handle_dice_roll(websocket: WebSocket, game_id: str, user_id: str, user: User, character_name: str, data: Dict[str, Any], db: AsyncSession):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–µ–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
    notation = data.get("notation", "").strip()
    if not notation:
        return

    try:
        from app.services.dice_service import dice_service

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
        pending_check = await get_pending_roll_check(game_id, character_name)

        if pending_check and notation == "1d20":
            # –î–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞–≤—ã–∫–æ–≤ –±—Ä–æ—Å–∞–µ–º —Ç–æ–ª—å–∫–æ d20, –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–º –ø–æ—Ç–æ–º
            dice_result = dice_service.roll_from_notation("1d20")
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –±—Ä–æ—Å–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é –Ω–æ—Ç–∞—Ü–∏—é
            dice_result = dice_service.roll_from_notation(notation)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DiceResult –≤ dict –¥–ª—è JSON
        result_dict = {
            "notation": notation,
            "individual_rolls": dice_result.individual_rolls,
            "modifiers": dice_result.modifiers,
            "total": dice_result.total,  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ —ç—Ç–æ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ d20
            "is_critical": dice_result.is_critical,
            "is_fumble": dice_result.is_fumble,
            "player_name": character_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            "timestamp": datetime.utcnow().isoformat()
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
        dice_message = WebSocketMessage("dice_roll", result_dict)
        await manager.broadcast_to_game(dice_message.to_json(), game_id)

        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤—ã–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if pending_check:
            await process_dice_check_result(game_id, character_name, result_dict, pending_check)
            # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            await clear_pending_roll_check(game_id, character_name)

        logger.info(f"Dice roll by {character_name}: {notation} = {dice_result.total}")

    except Exception as e:
        logger.error(f"Error handling dice roll: {e}")
        error_msg = WebSocketMessage("error", {
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ—Å–∫–µ {notation}: {str(e)}",
            "timestamp": datetime.utcnow().isoformat()
        })
        await websocket.send_text(error_msg.to_json())


async def process_dice_check_result(game_id: str, character_name: str, roll_result: Dict, pending_check: Dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É–±–∏–∫–∞–º–∏ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        dc = pending_check.get("dc", 15)
        original_action = pending_check.get("original_action", "unknown action")
        roll_type = pending_check.get("roll_type", "skill_check")
        skill_display = pending_check.get("ability_or_skill", "–Ω–∞–≤—ã–∫").title()
        modifier = pending_check.get("modifier", 0)
        character_info = pending_check.get("character_info")

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ (–±–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞)
        base_roll = roll_result.get("total", 0)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        final_total = base_roll + modifier
        success = final_total >= dc

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
        context = {
            "player_name": character_name,
            "original_action": original_action,
            "roll_type": roll_type,
            "skill_display": skill_display,
            "base_roll": base_roll,
            "modifier": modifier,
            "final_total": final_total,
            "dc": dc,
            "success": success,
            "current_scene": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤—ã–∫–∞/—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"
        }

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –±—Ä–æ—Å–æ–∫
        ai_response = await ai_service.generate_dice_result_response(
            action=original_action,
            roll_result={
                "base_roll": base_roll,
                "modifier": modifier,
                "total": final_total,
                "success": success,
                "skill": skill_display
            },
            dc=dc,
            character_name=character_name,
            game_context=context
        )

        if not ai_response:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç –µ—Å–ª–∏ –ò–ò –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª
            modifier_text = f"+{modifier}" if modifier > 0 else str(modifier) if modifier < 0 else ""
            roll_text = f"[{base_roll}{modifier_text} = {final_total}]"

            if success:
                ai_response = f"üéØ **{character_name}** —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç {original_action}! {roll_text}\n\n–ß—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ –¥–∞–ª—å—à–µ?"
            else:
                ai_response = f"‚ùå **{character_name}** —Ç–µ—Ä–ø–∏—Ç –Ω–µ—É–¥–∞—á—É –≤ –ø–æ–ø—ã—Ç–∫–µ {original_action}. {roll_text}\n\n–ö–∞–∫ –≤—ã –æ—Ç—Ä–µ–∞–≥–∏—Ä—É–µ—Ç–µ –Ω–∞ –Ω–µ—É–¥–∞—á—É?"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        check_result_msg = WebSocketMessage("dice_check_result", {
            "message": ai_response,
            "sender_name": "–ò–ò –ú–∞—Å—Ç–µ—Ä",
            "timestamp": datetime.utcnow().isoformat(),
            "base_roll": base_roll,
            "modifier": modifier,
            "final_total": final_total,
            "dc": dc,
            "success": success,
            "original_action": original_action,
            "player_name": character_name,
            "skill_display": skill_display,
            "is_dice_check_result": True
        })

        await manager.broadcast_to_game(check_result_msg.to_json(), game_id)
        logger.info(f"Dice check result for {character_name}: {skill_display} {base_roll}+{modifier}={final_total} vs DC{dc} = {'SUCCESS' if success else 'FAILURE'}")

    except Exception as e:
        logger.error(f"Error processing dice check result: {e}", exc_info=True)


async def send_fallback_ai_response(game_id: str, player_action: str, character_name: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–∞—Å–Ω–æ–π –æ—Ç–≤–µ—Ç –ò–ò –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
    fallback_response = f"ü§ñ *–ò–ò –ú–∞—Å—Ç–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!*\n\n" \
                        f"*{character_name} –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ: {player_action}*\n\n" \
                        f"–ß—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ –¥–∞–ª—å—à–µ?"

    fallback_msg = WebSocketMessage("ai_response", {
        "message": fallback_response,
        "sender_name": "–ò–ò –ú–∞—Å—Ç–µ—Ä (–æ—Ñ—Ñ–ª–∞–π–Ω)",
        "timestamp": datetime.utcnow().isoformat(),
        "in_response_to": player_action,
        "is_fallback": True
    })

    try:
        await manager.broadcast_to_game(fallback_msg.to_json(), game_id)
        logger.info(f"Sent fallback AI response for {character_name}")
    except Exception as e:
        logger.error(f"Failed to send fallback AI response: {e}")


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–∂–∏–¥–∞—é—â–∏–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∫—É–±–∏–∫–æ–≤
async def save_pending_roll_check(game_id: str, character_name: str, check_data: Dict):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∂–∏–¥–∞—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ"""
    try:
        key = f"pending_roll:{game_id}:{character_name}"
        await redis_client.setex(key, 300, json.dumps(check_data))  # 5 –º–∏–Ω—É—Ç TTL
        logger.debug(f"Saved pending roll check for {character_name} in game {game_id}")
    except Exception as e:
        logger.error(f"Error saving pending roll check: {e}")


async def get_pending_roll_check(game_id: str, character_name: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∂–∏–¥–∞—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ"""
    try:
        key = f"pending_roll:{game_id}:{character_name}"
        data = await redis_client.get(key)
        if data:
            return json.loads(data)
    except Exception as e:
        logger.error(f"Error getting pending roll check: {e}")
    return None


async def clear_pending_roll_check(game_id: str, character_name: str):
    """–£–¥–∞–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∂–∏–¥–∞—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ"""
    try:
        key = f"pending_roll:{game_id}:{character_name}"
        await redis_client.delete(key)
        logger.debug(f"Cleared pending roll check for {character_name} in game {game_id}")
    except Exception as e:
        logger.error(f"Error clearing pending roll check: {e}")


# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏–π
def get_roll_type_description(roll_type: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ –±—Ä–æ—Å–∫–∞"""
    descriptions = {
        "–ø—Ä–æ–≤–µ—Ä–∫–∞_–Ω–∞–≤—ã–∫–∞": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤—ã–∫–∞",
        "–ø—Ä–æ–≤–µ—Ä–∫–∞_—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
        "–∞—Ç–∞–∫–∞": "–ë—Ä–æ—Å–æ–∫ –∞—Ç–∞–∫–∏",
        "—Å–ø–∞—Å–±—Ä–æ—Å–æ–∫": "–°–ø–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –±—Ä–æ—Å–æ–∫",
        "skill_check": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤—ã–∫–∞",
        "ability_check": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
        "attack": "–ë—Ä–æ—Å–æ–∫ –∞—Ç–∞–∫–∏",
        "saving_throw": "–°–ø–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π –±—Ä–æ—Å–æ–∫"
    }
    return descriptions.get(roll_type, "–ü—Ä–æ–≤–µ—Ä–∫–∞")


def get_ability_description(ability: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏/–Ω–∞–≤—ã–∫–∞"""
    descriptions = {
        "–∞—Ç–ª–µ—Ç–∏–∫–∞": "–ê—Ç–ª–µ—Ç–∏–∫–∞ (–°–∏–ª–∞)",
        "–≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ": "–í–æ—Å–ø—Ä–∏—è—Ç–∏–µ (–ú—É–¥—Ä–æ—Å—Ç—å)",
        "—Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å": "–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å (–õ–æ–≤–∫–æ—Å—Ç—å)",
        "—É–±–µ–∂–¥–µ–Ω–∏–µ": "–£–±–µ–∂–¥–µ–Ω–∏–µ (–•–∞—Ä–∏–∑–º–∞)",
        "–æ–±–º–∞–Ω": "–û–±–º–∞–Ω (–•–∞—Ä–∏–∑–º–∞)",
        "–∑–∞–ø—É–≥–∏–≤–∞–Ω–∏–µ": "–ó–∞–ø—É–≥–∏–≤–∞–Ω–∏–µ (–•–∞—Ä–∏–∑–º–∞)",
        "–ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å": "–ü—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–ú—É–¥—Ä–æ—Å—Ç—å)",
        "—Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ": "–†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç)",
        "–º–µ–¥–∏—Ü–∏–Ω–∞": "–ú–µ–¥–∏—Ü–∏–Ω–∞ (–ú—É–¥—Ä–æ—Å—Ç—å)",
        "–ø—Ä–∏—Ä–æ–¥–∞": "–ü—Ä–∏—Ä–æ–¥–∞ (–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç)",
        "—Ä–µ–ª–∏–≥–∏—è": "–†–µ–ª–∏–≥–∏—è (–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç)",
        "–º–∞–≥–∏—è": "–ú–∞–≥–∏—è (–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç)",
        "–∏—Å—Ç–æ—Ä–∏—è": "–ò—Å—Ç–æ—Ä–∏—è (–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç)",
        "–≤—ã–∂–∏–≤–∞–Ω–∏–µ": "–í—ã–∂–∏–≤–∞–Ω–∏–µ (–ú—É–¥—Ä–æ—Å—Ç—å)",
        "–æ–±—Ä–∞—â–µ–Ω–∏–µ_—Å_–∂–∏–≤–æ—Ç–Ω—ã–º–∏": "–û–±—Ä–∞—â–µ–Ω–∏–µ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏ (–ú—É–¥—Ä–æ—Å—Ç—å)",
        "–∞–∫—Ä–æ–±–∞—Ç–∏–∫–∞": "–ê–∫—Ä–æ–±–∞—Ç–∏–∫–∞ (–õ–æ–≤–∫–æ—Å—Ç—å)",
        "–ª–æ–≤–∫–æ—Å—Ç—å_—Ä—É–∫": "–õ–æ–≤–∫–æ—Å—Ç—å —Ä—É–∫ (–õ–æ–≤–∫–æ—Å—Ç—å)",
        "–≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ": "–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ (–•–∞—Ä–∏–∑–º–∞)",

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        "—Å–∏–ª–∞": "–°–∏–ª–∞",
        "–ª–æ–≤–∫–æ—Å—Ç—å": "–õ–æ–≤–∫–æ—Å—Ç—å",
        "—Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ": "–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ",
        "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç": "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç",
        "–º—É–¥—Ä–æ—Å—Ç—å": "–ú—É–¥—Ä–æ—Å—Ç—å",
        "—Ö–∞—Ä–∏–∑–º–∞": "–•–∞—Ä–∏–∑–º–∞",

        # English versions
        "athletics": "–ê—Ç–ª–µ—Ç–∏–∫–∞ (–°–∏–ª–∞)",
        "perception": "–í–æ—Å–ø—Ä–∏—è—Ç–∏–µ (–ú—É–¥—Ä–æ—Å—Ç—å)",
        "stealth": "–°–∫—Ä—ã—Ç–Ω–æ—Å—Ç—å (–õ–æ–≤–∫–æ—Å—Ç—å)",
        "persuasion": "–£–±–µ–∂–¥–µ–Ω–∏–µ (–•–∞—Ä–∏–∑–º–∞)",
        "deception": "–û–±–º–∞–Ω (–•–∞—Ä–∏–∑–º–∞)",
        "intimidation": "–ó–∞–ø—É–≥–∏–≤–∞–Ω–∏–µ (–•–∞—Ä–∏–∑–º–∞)",
        "insight": "–ü—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–ú—É–¥—Ä–æ—Å—Ç—å)",
        "investigation": "–†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç)",
        "medicine": "–ú–µ–¥–∏—Ü–∏–Ω–∞ (–ú—É–¥—Ä–æ—Å—Ç—å)",
        "nature": "–ü—Ä–∏—Ä–æ–¥–∞ (–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç)",
        "religion": "–†–µ–ª–∏–≥–∏—è (–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç)",
        "arcana": "–ú–∞–≥–∏—è (–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç)",
        "history": "–ò—Å—Ç–æ—Ä–∏—è (–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç)",
        "survival": "–í—ã–∂–∏–≤–∞–Ω–∏–µ (–ú—É–¥—Ä–æ—Å—Ç—å)",
        "animal_handling": "–û–±—Ä–∞—â–µ–Ω–∏–µ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏ (–ú—É–¥—Ä–æ—Å—Ç—å)",
        "acrobatics": "–ê–∫—Ä–æ–±–∞—Ç–∏–∫–∞ (–õ–æ–≤–∫–æ—Å—Ç—å)",
        "sleight_of_hand": "–õ–æ–≤–∫–æ—Å—Ç—å —Ä—É–∫ (–õ–æ–≤–∫–æ—Å—Ç—å)",
        "performance": "–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ (–•–∞—Ä–∏–∑–º–∞)",

        "strength": "–°–∏–ª–∞",
        "dexterity": "–õ–æ–≤–∫–æ—Å—Ç—å",
        "constitution": "–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ",
        "intelligence": "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç",
        "wisdom": "–ú—É–¥—Ä–æ—Å—Ç—å",
        "charisma": "–•–∞—Ä–∏–∑–º–∞"
    }
    return descriptions.get(ability.lower(), ability.title())


def get_skill_modifier(skill: str, character_name: str) -> int:
    """
    –ü–æ–ª—É—á–∏—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞–≤—ã–∫–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–∞ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    """
    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–∞ –≤—ã—á–∏—Å–ª—è—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    import random
    return random.randint(-1, 5)


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ WebSocket endpoints –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
@router.websocket("/admin/{game_id}")
async def websocket_admin_endpoint(
        websocket: WebSocket,
        game_id: str,
        token: str = Query(...),
        db: AsyncSession = Depends(get_db_session)
):
    """WebSocket endpoint –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–≥—Ä—ã (–î–ú)"""
    user = None

    try:
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_user_from_token(token, db)
        if not user:
            await websocket.close(code=1008, reason="Invalid token")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        query = select(Game).join(Campaign).where(
            Game.id == game_id,
            Campaign.creator_id == user.id
        )
        result = await db.execute(query)
        game = result.scalar_one_or_none()

        if not game:
            await websocket.close(code=1008, reason="Access denied")
            return

        await websocket.accept()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        admin_info = {
            "connected_players": manager.get_connected_users(game_id),
            "game_status": game.status.value,
            "total_players": game.current_players,
            "session_duration": game.session_duration
        }

        admin_message = WebSocketMessage("admin_info", admin_info)
        await websocket.send_text(admin_message.to_json())

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        while True:
            try:
                data = await websocket.receive_text()
                message_data = json.loads(data)
                command = message_data.get("command")

                if command == "kick_player":
                    player_id = message_data.get("player_id")
                    await handle_kick_player(game_id, player_id, db)
                elif command == "pause_game":
                    await handle_pause_game(game_id, db)
                elif command == "resume_game":
                    await handle_resume_game(game_id, db)
                elif command == "broadcast_message":
                    message = message_data.get("message", "")
                    await handle_dm_broadcast(game_id, message, user.username)
                else:
                    logger.warning(f"Unknown admin command: {command}")

            except WebSocketDisconnect:
                break
            except Exception as e:
                logger.error(f"Error handling admin command: {e}")

    except Exception as e:
        logger.error(f"Admin WebSocket error for game {game_id}: {e}")
    finally:
        if user:
            logger.info(f"Admin {user.username} disconnected from game {game_id}")


async def handle_kick_player(game_id: str, player_id: str, db: AsyncSession):
    """–ò—Å–∫–ª—é—á–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –∏–≥—Ä—ã"""
    try:
        # –û—Ç–∫–ª—é—á–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await manager.disconnect(game_id, player_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
        kick_message = WebSocketMessage("system", {
            "message": f"–ò–≥—Ä–æ–∫ –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –∏–≥—Ä—ã",
            "kicked_player_id": player_id,
            "timestamp": datetime.utcnow().isoformat()
        })
        await manager.broadcast_to_game(kick_message.to_json(), game_id)

        logger.info(f"Player {player_id} kicked from game {game_id}")
    except Exception as e:
        logger.error(f"Error kicking player: {e}")


async def handle_pause_game(game_id: str, db: AsyncSession):
    """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É"""
    try:
        query = select(Game).where(Game.id == game_id)
        result = await db.execute(query)
        game = result.scalar_one_or_none()

        if game and game.pause_game():
            await db.commit()

            pause_message = WebSocketMessage("system", {
                "message": "üî∏ –ò–≥—Ä–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –î–∞–Ω–∂–µ–æ–Ω –ú–∞—Å—Ç–µ—Ä–æ–º",
                "game_status": "paused",
                "timestamp": datetime.utcnow().isoformat()
            })
            await manager.broadcast_to_game(pause_message.to_json(), game_id)

        logger.info(f"Game {game_id} paused")
    except Exception as e:
        logger.error(f"Error pausing game: {e}")


async def handle_resume_game(game_id: str, db: AsyncSession):
    """–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É"""
    try:
        query = select(Game).where(Game.id == game_id)
        result = await db.execute(query)
        game = result.scalar_one_or_none()

        if game and game.resume_game():
            await db.commit()

            resume_message = WebSocketMessage("system", {
                "message": "‚ñ∂Ô∏è –ò–≥—Ä–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –î–∞–Ω–∂–µ–æ–Ω –ú–∞—Å—Ç–µ—Ä–æ–º",
                "game_status": "active",
                "timestamp": datetime.utcnow().isoformat()
            })
            await manager.broadcast_to_game(resume_message.to_json(), game_id)

        logger.info(f"Game {game_id} resumed")
    except Exception as e:
        logger.error(f"Error resuming game: {e}")


async def handle_dm_broadcast(game_id: str, message: str, dm_name: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –î–ú –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º"""
    try:
        dm_message = WebSocketMessage("dm_broadcast", {
            "message": f"üì¢ **–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –î–ú ({dm_name}):**\n\n{message}",
            "sender_name": f"–î–ú {dm_name}",
            "timestamp": datetime.utcnow().isoformat(),
            "is_dm_message": True
        })
        await manager.broadcast_to_game(dm_message.to_json(), game_id)

        logger.info(f"DM broadcast sent in game {game_id}")
    except Exception as e:
        logger.error(f"Error sending DM broadcast: {e}")


# –≠–∫—Å–ø–æ—Ä—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
__all__ = ["manager", "WebSocketMessage"]