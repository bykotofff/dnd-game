#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
–ó–∞–ø—É—Å–∫: python fix_database.py
"""

import asyncio
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(Path(__file__).parent))

from app.config import settings
from app.core.database import engine, init_db
from app.models.base import Base
from sqlalchemy import text, inspect
from sqlalchemy.ext.asyncio import AsyncSession

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


async def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with engine.begin() as conn:
            result = await conn.execute(text("SELECT version()"))
            version = result.scalar()
            logger.info(f"‚úÖ PostgreSQL connection OK: {version}")
            return True
    except Exception as e:
        logger.error(f"‚ùå Database connection failed: {e}")
        return False


async def check_database_exists():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with engine.begin() as conn:
            result = await conn.execute(text("SELECT current_database()"))
            db_name = result.scalar()
            logger.info(f"‚úÖ Connected to database: {db_name}")
            return True
    except Exception as e:
        logger.error(f"‚ùå Database check failed: {e}")
        return False


async def check_tables_exist():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü"""
    try:
        async with engine.begin() as conn:
            inspector = inspect(conn.sync_engine)
            tables = inspector.get_table_names()

            logger.info(f"üìä Existing tables: {tables}")

            required_tables = ['users', 'characters', 'campaigns', 'games', 'game_states']
            missing_tables = [table for table in required_tables if table not in tables]

            if missing_tables:
                logger.warning(f"‚ö†Ô∏è Missing tables: {missing_tables}")
                return False
            else:
                logger.info("‚úÖ All required tables exist")
                return True

    except Exception as e:
        logger.error(f"‚ùå Tables check failed: {e}")
        return False


async def create_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
    try:
        logger.info("üî® Creating database tables...")

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        from app.models import user, character, campaign, game, game_state

        async with engine.begin() as conn:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã (–û–°–¢–û–†–û–ñ–ù–û: —É–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ!)
            await conn.run_sync(Base.metadata.drop_all)
            logger.info("üóëÔ∏è Dropped existing tables")

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∑–∞–Ω–æ–≤–æ
            await conn.run_sync(Base.metadata.create_all)
            logger.info("‚úÖ Tables created successfully")

        return True

    except Exception as e:
        logger.error(f"‚ùå Table creation failed: {e}")
        return False


async def test_user_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from app.models.user import User
        from app.services.auth_service import auth_service

        async with AsyncSession(engine) as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user = User(
                username="test_diagnostic",
                email="test@diagnostic.com",
                hashed_password=auth_service.get_password_hash("test123"),
                display_name="Test User",
                is_active=True
            )

            session.add(test_user)
            await session.commit()
            await session.refresh(test_user)

            logger.info(f"‚úÖ Test user created: {test_user.id}")

            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await session.delete(test_user)
            await session.commit()

            logger.info("‚úÖ Test user cleaned up")
            return True

    except Exception as e:
        logger.error(f"‚ùå User creation test failed: {e}")
        return False


async def check_user_table_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã users"""
    try:
        async with engine.begin() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
            result = await conn.execute(text("""
                SELECT column_name, data_type, is_nullable 
                FROM information_schema.columns 
                WHERE table_name = 'users'
                ORDER BY ordinal_position
            """))

            columns = result.fetchall()
            if columns:
                logger.info("üìã Users table structure:")
                for col in columns:
                    logger.info(f"  - {col.column_name}: {col.data_type} (nullable: {col.is_nullable})")
                return True
            else:
                logger.error("‚ùå Users table not found")
                return False

    except Exception as e:
        logger.error(f"‚ùå Table structure check failed: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    logger.info("üîç Starting database diagnostics...")
    logger.info(f"üì° Database URL: {settings.DATABASE_URL}")

    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not await check_database_connection():
        logger.error("üí• Cannot proceed without database connection")
        return False

    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not await check_database_exists():
        logger.error("üí• Database does not exist or is not accessible")
        return False

    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
    tables_exist = await check_tables_exist()

    if not tables_exist:
        logger.info("üîß Tables missing, creating them...")
        if not await create_tables():
            logger.error("üí• Failed to create tables")
            return False

    # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã users
    if not await check_user_table_structure():
        logger.error("üí• Users table structure is invalid")
        return False

    # –®–∞–≥ 5: –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not await test_user_creation():
        logger.error("üí• User creation test failed")
        return False

    logger.info("üéâ Database diagnostics completed successfully!")
    logger.info("‚ú® You can now try to register a user again")
    return True


if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        if result:
            sys.exit(0)
        else:
            sys.exit(1)
    except KeyboardInterrupt:
        logger.info("üõë Diagnostics interrupted by user")
        sys.exit(1)
    except Exception as e:
        logger.error(f"üí• Unexpected error: {e}")
        sys.exit(1)