import React, { useState } from 'react';
import { motion } from 'framer-motion';
import {
    CubeIcon,
    PlusIcon,
    MinusIcon,
    SparklesIcon,
    StarIcon,
} from '@heroicons/react/24/outline';

import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/Card';
import { useGameData, useGameActions } from '@/store/gameStore';
import { toast } from 'react-hot-toast';

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ—Å—Ç–∏ D&D
const STANDARD_DICE = [
    { sides: 4, icon: 'üî∏', color: 'text-blue-400' },
    { sides: 6, icon: '‚öÄ', color: 'text-green-400' },
    { sides: 8, icon: 'üîπ', color: 'text-yellow-400' },
    { sides: 10, icon: 'üîü', color: 'text-orange-400' },
    { sides: 12, icon: 'üîÆ', color: 'text-purple-400' },
    { sides: 20, icon: 'üé≤', color: 'text-red-400' },
    { sides: 100, icon: 'üíØ', color: 'text-pink-400' },
];

// –ë—ã—Å—Ç—Ä—ã–µ –±—Ä–æ—Å–∫–∏ –¥–ª—è D&D
const QUICK_ROLLS = [
    { label: '–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞', notation: '1d20', purpose: '–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞' },
    { label: '–ê—Ç–∞–∫–∞', notation: '1d20', purpose: '–ë—Ä–æ—Å–æ–∫ –∞—Ç–∞–∫–∏' },
    { label: '–£—Ä–æ–Ω –º–µ—á–æ–º', notation: '1d8', purpose: '–£—Ä–æ–Ω –º–µ—á–æ–º' },
    { label: '–õ–µ—á–µ–Ω–∏–µ', notation: '1d4+1', purpose: '–ó–µ–ª—å–µ –ª–µ—á–µ–Ω–∏—è' },
    { label: '–§–∞–µ—Ä–±–æ–ª', notation: '8d6', purpose: '–£—Ä–æ–Ω —Ñ–∞–µ—Ä–±–æ–ª–æ–º' },
    { label: '–°–ø–∞—Å-–±—Ä–æ—Å–æ–∫', notation: '1d20', purpose: '–°–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–π –±—Ä–æ—Å–æ–∫' },
];

// –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
const ABILITY_CHECKS = [
    { label: '–°–∏–ª–∞', ability: 'strength' },
    { label: '–õ–æ–≤–∫–æ—Å—Ç—å', ability: 'dexterity' },
    { label: '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ', ability: 'constitution' },
    { label: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç', ability: 'intelligence' },
    { label: '–ú—É–¥—Ä–æ—Å—Ç—å', ability: 'wisdom' },
    { label: '–•–∞—Ä–∏–∑–º–∞', ability: 'charisma' },
];

const DicePanel: React.FC = () => {
    const { lastDiceRoll, isConnected } = useGameData();
    const { rollDice } = useGameActions();

    const [customNotation, setCustomNotation] = useState('');
    const [customPurpose, setCustomPurpose] = useState('');
    const [diceCount, setDiceCount] = useState(1);
    const [selectedDie, setSelectedDie] = useState(20);
    const [modifier, setModifier] = useState(0);
    const [advantage, setAdvantage] = useState<'none' | 'advantage' | 'disadvantage'>('none');

    // –ü—Ä–æ—Å—Ç–æ–π –±—Ä–æ—Å–æ–∫
    const handleSimpleRoll = async (notation: string, purpose?: string) => {
        if (!isConnected) {
            toast.error('–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –∏–≥—Ä–µ');
            return;
        }

        try {
            await rollDice(notation, purpose);
        } catch (error) {
            console.error('Failed to roll dice:', error);
        }
    };

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–æ—Ç–∞—Ü–∏–∏ –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const buildNotation = () => {
        let notation = `${diceCount}d${selectedDie}`;

        if (modifier !== 0) {
            notation += modifier > 0 ? `+${modifier}` : `${modifier}`;
        }

        if (advantage === 'advantage') {
            notation += ' advantage';
        } else if (advantage === 'disadvantage') {
            notation += ' disadvantage';
        }

        return notation;
    };

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±—Ä–æ—Å–∫–æ–≤
    const handleConstructedRoll = async () => {
        const notation = buildNotation();
        const purpose = customPurpose || `${diceCount}d${selectedDie}`;
        await handleSimpleRoll(notation, purpose);
    };

    // –ö–∞—Å—Ç–æ–º–Ω—ã–π –±—Ä–æ—Å–æ–∫
    const handleCustomRoll = async () => {
        if (!customNotation.trim()) {
            toast.error('–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ç–∞—Ü–∏—é –∫–æ—Å—Ç–∏');
            return;
        }

        await handleSimpleRoll(customNotation, customPurpose || '–ö–∞—Å—Ç–æ–º–Ω—ã–π –±—Ä–æ—Å–æ–∫');
    };

    return (
        <div className="p-4 space-y-6">
            {/* –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç */}
            {lastDiceRoll && (
                <motion.div
                    initial={{ opacity: 0, scale: 0.9 }}
                    animate={{ opacity: 1, scale: 1 }}
                    className="text-center"
                >
                    <Card className="bg-gradient-to-br from-green-900/30 to-green-800/30 border-green-700/50">
                        <CardContent className="p-4">
                            <div className="text-2xl font-bold text-green-100 mb-2">
                                {lastDiceRoll.total}
                            </div>
                            <div className="text-sm text-green-300">
                                {lastDiceRoll.notation}
                            </div>
                            {lastDiceRoll.individual_rolls.length > 1 && (
                                <div className="text-xs text-green-400 mt-1">
                                    [{lastDiceRoll.individual_rolls.join(', ')}]
                                </div>
                            )}
                            {lastDiceRoll.is_critical && (
                                <div className="text-yellow-400 text-sm mt-2">
                                    ‚≠ê –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö!
                                </div>
                            )}
                            {lastDiceRoll.is_fumble && (
                                <div className="text-red-400 text-sm mt-2">
                                    üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ—É–¥–∞—á–∞!
                                </div>
                            )}
                        </CardContent>
                    </Card>
                </motion.div>
            )}

            {/* –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ—Å—Ç–∏ */}
            <div>
                <h3 className="text-lg font-semibold text-white mb-3 flex items-center gap-2">
                    <CubeIcon className="w-5 h-5" />
                    –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ—Å—Ç–∏
                </h3>
                <div className="grid grid-cols-4 gap-2">
                    {STANDARD_DICE.map((die) => (
                        <Button
                            key={die.sides}
                            onClick={() => handleSimpleRoll(`1d${die.sides}`, `d${die.sides}`)}
                            disabled={!isConnected}
                            variant="outline"
                            className="h-16 flex flex-col items-center justify-center text-xs hover:bg-gray-700"
                        >
                            <span className={`text-lg ${die.color}`}>{die.icon}</span>
                            <span className="text-gray-300">d{die.sides}</span>
                        </Button>
                    ))}
                </div>
            </div>

            {/* –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±—Ä–æ—Å–∫–æ–≤ */}
            <div>
                <h3 className="text-lg font-semibold text-white mb-3 flex items-center gap-2">
                    <SparklesIcon className="w-5 h-5" />
                    –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
                </h3>

                <Card className="bg-gray-800/50 border-gray-700">
                    <CardContent className="p-4 space-y-4">
                        {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Å—Ç–µ–π */}
                        <div>
                            <label className="block text-sm text-gray-300 mb-2">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Å—Ç–µ–π</label>
                            <div className="flex items-center gap-2">
                                <Button
                                    onClick={() => setDiceCount(Math.max(1, diceCount - 1))}
                                    size="sm"
                                    variant="outline"
                                    disabled={diceCount <= 1}
                                >
                                    <MinusIcon className="w-4 h-4" />
                                </Button>
                                <span className="w-12 text-center text-white font-medium">{diceCount}</span>
                                <Button
                                    onClick={() => setDiceCount(Math.min(10, diceCount + 1))}
                                    size="sm"
                                    variant="outline"
                                    disabled={diceCount >= 10}
                                >
                                    <PlusIcon className="w-4 h-4" />
                                </Button>
                            </div>
                        </div>

                        {/* –¢–∏–ø –∫–æ—Å—Ç–∏ */}
                        <div>
                            <label className="block text-sm text-gray-300 mb-2">–¢–∏–ø –∫–æ—Å—Ç–∏</label>
                            <div className="grid grid-cols-4 gap-1">
                                {STANDARD_DICE.map((die) => (
                                    <Button
                                        key={die.sides}
                                        onClick={() => setSelectedDie(die.sides)}
                                        variant={selectedDie === die.sides ? 'primary' : 'outline'}
                                        size="sm"
                                        className="text-xs"
                                    >
                                        d{die.sides}
                                    </Button>
                                ))}
                            </div>
                        </div>

                        {/* –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä */}
                        <div>
                            <label className="block text-sm text-gray-300 mb-2">–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä</label>
                            <div className="flex items-center gap-2">
                                <Button
                                    onClick={() => setModifier(modifier - 1)}
                                    size="sm"
                                    variant="outline"
                                >
                                    <MinusIcon className="w-4 h-4" />
                                </Button>
                                <span className="w-12 text-center text-white font-medium">
                                    {modifier >= 0 ? `+${modifier}` : modifier}
                                </span>
                                <Button
                                    onClick={() => setModifier(modifier + 1)}
                                    size="sm"
                                    variant="outline"
                                >
                                    <PlusIcon className="w-4 h-4" />
                                </Button>
                            </div>
                        </div>

                        {/* –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ/–ü–æ–º–µ—Ö–∞ */}
                        <div>
                            <label className="block text-sm text-gray-300 mb-2">–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ</label>
                            <div className="grid grid-cols-3 gap-1">
                                <Button
                                    onClick={() => setAdvantage('none')}
                                    variant={advantage === 'none' ? 'primary' : 'outline'}
                                    size="sm"
                                    className="text-xs"
                                >
                                    –û–±—ã—á–Ω–æ
                                </Button>
                                <Button
                                    onClick={() => setAdvantage('advantage')}
                                    variant={advantage === 'advantage' ? 'primary' : 'outline'}
                                    size="sm"
                                    className="text-xs text-green-400"
                                >
                                    –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ
                                </Button>
                                <Button
                                    onClick={() => setAdvantage('disadvantage')}
                                    variant={advantage === 'disadvantage' ? 'primary' : 'outline'}
                                    size="sm"
                                    className="text-xs text-red-400"
                                >
                                    –ü–æ–º–µ—Ö–∞
                                </Button>
                            </div>
                        </div>

                        {/* –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –±—Ä–æ—Å–∫–∞ */}
                        <div>
                            <label className="block text-sm text-gray-300 mb-2">–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                            <Input
                                value={customPurpose}
                                onChange={(e) => setCustomPurpose(e.target.value)}
                                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê—Ç–∞–∫–∞ –º–µ—á–æ–º"
                                className="bg-gray-700 border-gray-600 text-white"
                            />
                        </div>

                        {/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∫–Ω–æ–ø–∫–∞ –±—Ä–æ—Å–∫–∞ */}
                        <div className="text-center">
                            <div className="text-lg font-mono text-amber-400 mb-3">
                                {buildNotation()}
                            </div>
                            <Button
                                onClick={handleConstructedRoll}
                                disabled={!isConnected}
                                variant="primary"
                                className="w-full"
                            >
                                <CubeIcon className="w-4 h-4 mr-2" />
                                –ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏
                            </Button>
                        </div>
                    </CardContent>
                </Card>
            </div>

            {/* –ë—ã—Å—Ç—Ä—ã–µ –±—Ä–æ—Å–∫–∏ */}
            <div>
                <h3 className="text-lg font-semibold text-white mb-3 flex items-center gap-2">
                    <StarIcon className="w-5 h-5" />
                    –ë—ã—Å—Ç—Ä—ã–µ –±—Ä–æ—Å–∫–∏
                </h3>
                <div className="grid grid-cols-2 gap-2">
                    {QUICK_ROLLS.map((roll) => (
                        <Button
                            key={roll.label}
                            onClick={() => handleSimpleRoll(roll.notation, roll.purpose)}
                            disabled={!isConnected}
                            variant="outline"
                            size="sm"
                            className="text-xs hover:bg-gray-700"
                        >
                            {roll.label}
                        </Button>
                    ))}
                </div>
            </div>

            {/* –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ */}
            <div>
                <h3 className="text-lg font-semibold text-white mb-3">–ü—Ä–æ–≤–µ—Ä–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫</h3>
                <div className="grid grid-cols-2 gap-2">
                    {ABILITY_CHECKS.map((check) => (
                        <Button
                            key={check.ability}
                            onClick={() => handleSimpleRoll('1d20', `–ü—Ä–æ–≤–µ—Ä–∫–∞ ${check.label.toLowerCase()}`)}
                            disabled={!isConnected}
                            variant="outline"
                            size="sm"
                            className="text-xs hover:bg-gray-700"
                        >
                            {check.label}
                        </Button>
                    ))}
                </div>
            </div>

            {/* –ö–∞—Å—Ç–æ–º–Ω—ã–π –±—Ä–æ—Å–æ–∫ */}
            <div>
                <h3 className="text-lg font-semibold text-white mb-3">–ö–∞—Å—Ç–æ–º–Ω—ã–π –±—Ä–æ—Å–æ–∫</h3>
                <Card className="bg-gray-800/50 border-gray-700">
                    <CardContent className="p-4 space-y-3">
                        <div>
                            <label className="block text-sm text-gray-300 mb-2">–ù–æ—Ç–∞—Ü–∏—è</label>
                            <Input
                                value={customNotation}
                                onChange={(e) => setCustomNotation(e.target.value)}
                                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 3d6+2, 1d20 advantage"
                                className="bg-gray-700 border-gray-600 text-white"
                            />
                        </div>
                        <div>
                            <label className="block text-sm text-gray-300 mb-2">–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ</label>
                            <Input
                                value={customPurpose}
                                onChange={(e) => setCustomPurpose(e.target.value)}
                                placeholder="–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –±—Ä–æ—Å–∫–∞"
                                className="bg-gray-700 border-gray-600 text-white"
                            />
                        </div>
                        <Button
                            onClick={handleCustomRoll}
                            disabled={!isConnected || !customNotation.trim()}
                            variant="primary"
                            className="w-full"
                        >
                            <CubeIcon className="w-4 h-4 mr-2" />
                            –ë—Ä–æ—Å–∏—Ç—å
                        </Button>
                    </CardContent>
                </Card>
            </div>

            {/* –°–ø—Ä–∞–≤–∫–∞ –ø–æ –Ω–æ—Ç–∞—Ü–∏–∏ */}
            <div className="text-xs text-gray-400 space-y-1">
                <div className="font-medium text-gray-300">–ü—Ä–∏–º–µ—Ä—ã –Ω–æ—Ç–∞—Ü–∏–∏:</div>
                <div>‚Ä¢ 1d20 - –æ–¥–∏–Ω d20</div>
                <div>‚Ä¢ 2d6+3 - –¥–≤–∞ d6 –ø–ª—é—Å 3</div>
                <div>‚Ä¢ 1d20 advantage - —Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ–º</div>
                <div>‚Ä¢ 1d20 disadvantage - —Å –ø–æ–º–µ—Ö–æ–π</div>
                <div>‚Ä¢ 8d6 - –≤–æ—Å–µ–º—å d6 (—É—Ä–æ–Ω —Ñ–∞–µ—Ä–±–æ–ª–∞)</div>
            </div>

            {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
            {!isConnected && (
                <div className="text-center p-4 bg-red-900/30 border border-red-700/50 rounded-lg">
                    <div className="text-red-400 text-sm">
                        ‚ö†Ô∏è –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –∏–≥—Ä–µ
                    </div>
                    <div className="text-red-300 text-xs mt-1">
                        –ë—Ä–æ—Å–∫–∏ –∫–æ—Å—Ç–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
                    </div>
                </div>
            )}
        </div>
    );
};

export default DicePanel;