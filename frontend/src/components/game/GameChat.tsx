import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
    PaperAirplaneIcon,
    CubeIcon,
    SparklesIcon,
    UserCircleIcon,
    ComputerDesktopIcon,
} from '@heroicons/react/24/outline';

import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { useGameData, useGameActions } from '@/store/gameStore';
import { useAuthStore } from '@/store/authStore';
import type { GameMessage, DiceRollResult } from '@/services/gameService';

const GameChat: React.FC = () => {
    const { user } = useAuthStore();
    const { messages, isLoadingMessages, isConnected } = useGameData();
    const { sendMessage, rollDice } = useGameActions();

    const [messageInput, setMessageInput] = useState('');
    const [messageType, setMessageType] = useState<'chat' | 'action' | 'ooc'>('chat');
    const messagesEndRef = useRef<HTMLDivElement>(null);
    const inputRef = useRef<HTMLInputElement>(null);

    // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages]);

    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    useEffect(() => {
        if (isConnected) {
            inputRef.current?.focus();
        }
    }, [isConnected]);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const handleSendMessage = async () => {
        if (!messageInput.trim() || !isConnected) return;

        const content = messageInput.trim();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–µ–π
        const diceMatch = content.match(/^\/roll\s+(.+)/i);
        if (diceMatch) {
            const notation = diceMatch[1].trim();
            await rollDice(notation, '–ë—Ä–æ—Å–æ–∫ –∏–∑ —á–∞—Ç–∞');
        } else {
            await sendMessage(content, messageType);
        }

        setMessageInput('');
        inputRef.current?.focus();
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter
    const handleKeyPress = (e: React.KeyboardEvent) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSendMessage();
        }
    };

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    const formatTime = (timestamp: string) => {
        return new Date(timestamp).toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit',
        });
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const getSenderIcon = (message: GameMessage) => {
        if (message.sender_id === 'ai_dm') {
            return <SparklesIcon className="w-5 h-5 text-purple-400" />;
        }
        if (message.message_type === 'system') {
            return <ComputerDesktopIcon className="w-5 h-5 text-blue-400" />;
        }
        if (message.message_type === 'roll') {
            return <CubeIcon className="w-5 h-5 text-green-400" />;
        }
        return <UserCircleIcon className="w-5 h-5 text-gray-400" />;
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
    const getMessageStyles = (message: GameMessage) => {
        const isOwnMessage = message.sender_id === user?.id;

        switch (message.message_type) {
            case 'ai_dm':
                return {
                    container: 'bg-purple-900/30 border-purple-700/50',
                    sender: 'text-purple-300',
                    content: 'text-purple-100',
                };
            case 'system':
                return {
                    container: 'bg-blue-900/30 border-blue-700/50',
                    sender: 'text-blue-300',
                    content: 'text-blue-100',
                };
            case 'roll':
                return {
                    container: 'bg-green-900/30 border-green-700/50',
                    sender: 'text-green-300',
                    content: 'text-green-100',
                };
            case 'action':
                return {
                    container: `${isOwnMessage ? 'bg-amber-900/30 border-amber-700/50' : 'bg-gray-800/50 border-gray-700/50'}`,
                    sender: `${isOwnMessage ? 'text-amber-300' : 'text-gray-300'}`,
                    content: `${isOwnMessage ? 'text-amber-100' : 'text-gray-200'} italic`,
                };
            default: // chat
                return {
                    container: `${isOwnMessage ? 'bg-gray-700/50 border-gray-600/50' : 'bg-gray-800/50 border-gray-700/50'}`,
                    sender: `${isOwnMessage ? 'text-white' : 'text-gray-300'}`,
                    content: `${isOwnMessage ? 'text-gray-100' : 'text-gray-200'}`,
                };
        }
    };

    // –†–µ–Ω–¥–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–µ–π
    const renderDiceRoll = (diceRoll: DiceRollResult) => (
        <div className="mt-2 p-3 bg-green-800/30 rounded-lg border border-green-700/50">
            <div className="flex items-center justify-between mb-2">
                <span className="text-green-300 font-medium">{diceRoll.notation}</span>
                <span className="text-green-100 text-lg font-bold">{diceRoll.total}</span>
            </div>

            {diceRoll.individual_rolls.length > 1 && (
                <div className="text-sm text-green-200">
                    –ë—Ä–æ—Å–∫–∏: {diceRoll.individual_rolls.join(', ')}
                    {diceRoll.modifiers !== 0 && ` (${diceRoll.modifiers >= 0 ? '+' : ''}${diceRoll.modifiers})`}
                </div>
            )}

            {diceRoll.is_critical && (
                <div className="text-yellow-400 text-sm font-medium mt-1">
                    ‚≠ê –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Å–ø–µ—Ö!
                </div>
            )}

            {diceRoll.is_fumble && (
                <div className="text-red-400 text-sm font-medium mt-1">
                    üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ—É–¥–∞—á–∞!
                </div>
            )}

            {diceRoll.purpose && (
                <div className="text-green-300 text-sm mt-1">
                    {diceRoll.purpose}
                </div>
            )}
        </div>
    );

    return (
        <div className="flex flex-col h-full bg-gray-900">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ */}
            <div className="p-4 border-b border-gray-700 bg-gray-800">
                <h2 className="text-lg font-semibold text-white flex items-center gap-2">
                    <SparklesIcon className="w-5 h-5 text-purple-400" />
                    –ò–≥—Ä–æ–≤–æ–π —á–∞—Ç
                </h2>
                <div className="flex gap-2 mt-2">
                    {[
                        { id: 'chat', label: '–ß–∞—Ç', icon: 'üí¨' },
                        { id: 'action', label: '–î–µ–π—Å—Ç–≤–∏–µ', icon: '‚öîÔ∏è' },
                        { id: 'ooc', label: '–í–Ω–µ –∏–≥—Ä—ã', icon: 'üó£Ô∏è' },
                    ].map((type) => (
                        <button
                            key={type.id}
                            onClick={() => setMessageType(type.id as any)}
                            className={`px-3 py-1 text-xs rounded-full transition-colors ${
                                messageType === type.id
                                    ? 'bg-amber-600 text-white'
                                    : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                            }`}
                        >
                            {type.icon} {type.label}
                        </button>
                    ))}
                </div>
            </div>

            {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
            <div className="flex-1 overflow-y-auto p-4 space-y-3">
                {isLoadingMessages && (
                    <div className="text-center text-gray-400 py-4">
                        <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-amber-400 mx-auto mb-2" />
                        –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...
                    </div>
                )}

                <AnimatePresence initial={false}>
                    {messages.map((message) => {
                        const styles = getMessageStyles(message);
                        const isOwnMessage = message.sender_id === user?.id;

                        return (
                            <motion.div
                                key={message.id}
                                initial={{ opacity: 0, y: 20 }}
                                animate={{ opacity: 1, y: 0 }}
                                exit={{ opacity: 0, y: -20 }}
                                transition={{ duration: 0.3 }}
                                className={`p-3 rounded-lg border ${styles.container} ${
                                    isOwnMessage ? 'ml-8' : 'mr-8'
                                }`}
                            >
                                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è */}
                                <div className="flex items-center justify-between mb-2">
                                    <div className="flex items-center gap-2">
                                        {getSenderIcon(message)}
                                        <span className={`font-medium text-sm ${styles.sender}`}>
                                            {message.sender_name}
                                        </span>
                                        {message.message_type === 'action' && (
                                            <span className="text-xs text-amber-400 bg-amber-900/30 px-2 py-0.5 rounded">
                                                –î–µ–π—Å—Ç–≤–∏–µ
                                            </span>
                                        )}
                                        {message.is_whisper && (
                                            <span className="text-xs text-purple-400 bg-purple-900/30 px-2 py-0.5 rounded">
                                                –®–µ–ø–æ—Ç
                                            </span>
                                        )}
                                    </div>
                                    <span className="text-xs text-gray-500">
                                        {formatTime(message.timestamp)}
                                    </span>
                                </div>

                                {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è */}
                                <div className={`${styles.content} whitespace-pre-wrap break-words`}>
                                    {message.content}
                                </div>

                                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞ –∫–æ—Å—Ç–µ–π */}
                                {message.dice_roll && renderDiceRoll(message.dice_roll)}
                            </motion.div>
                        );
                    })}
                </AnimatePresence>

                <div ref={messagesEndRef} />
            </div>

            {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
            <div className="p-4 border-t border-gray-700 bg-gray-800">
                <div className="flex gap-2">
                    <div className="flex-1">
                        <Input
                            ref={inputRef}
                            value={messageInput}
                            onChange={(e) => setMessageInput(e.target.value)}
                            onKeyPress={handleKeyPress}
                            placeholder={
                                messageType === 'chat'
                                    ? '–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ... (–∏–ª–∏ /roll 1d20 –¥–ª—è –±—Ä–æ—Å–∫–∞)'
                                    : messageType === 'action'
                                        ? '–û–ø–∏—à–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞...'
                                        : '–°–æ–æ–±—â–µ–Ω–∏–µ –≤–Ω–µ –∏–≥—Ä—ã...'
                            }
                            disabled={!isConnected}
                            className="bg-gray-700 border-gray-600 text-white placeholder-gray-400"
                        />
                    </div>
                    <Button
                        onClick={handleSendMessage}
                        disabled={!messageInput.trim() || !isConnected}
                        variant="primary"
                        size="icon"
                    >
                        <PaperAirplaneIcon className="w-4 h-4" />
                    </Button>
                </div>

                {/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ */}
                <div className="mt-2 text-xs text-gray-500">
                    <div className="flex flex-wrap gap-4">
                        <span>Enter - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å</span>
                        <span>/roll 1d20 - –±—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏</span>
                        <span>/roll 1d20+5 - —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º</span>
                        <span>/roll 2d6 advantage - —Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ–º</span>
                    </div>
                </div>

                {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
                {!isConnected && (
                    <div className="mt-2 text-center text-red-400 text-sm">
                        ‚ö†Ô∏è –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
                    </div>
                )}
            </div>
        </div>
    );
};

export default GameChat;