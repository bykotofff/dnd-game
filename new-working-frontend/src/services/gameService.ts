import apiService from '@/services/api';
import type { Game, GameMessage, Character, DiceRollData } from '@/types';

// –¢–∏–ø—ã –¥–ª—è GameService
export interface CreateGameData {
    name: string;
    description?: string;
    campaign_id: string;
    max_players?: number;
    game_system?: string;
    settings?: any;
}

export interface UpdateGameData {
    name?: string;
    description?: string;
    max_players?: number;
    settings?: any;
}

export interface JoinGameData {
    character_id?: string;
}

export interface StartGameData {
    campaign_id: string;
    character_id: string;
}

export interface GetGamesParams {
    status_filter?: 'waiting' | 'active' | 'paused' | 'ended';
    campaign_id?: string;
    limit?: number;
    offset?: number;
}

export interface GameResponse {
    id: string;
    name: string;
    description: string;
    status: string;
    current_players: number;
    max_players: number;
    current_scene?: string;
    created_at: string;
}

export interface GameDetailResponse extends GameResponse {
    campaign_id: string;
    game_system: string;
    settings: any;
    players: Record<string, any>;
    characters: string[];
    updated_at: string;
}

export interface DiceRollResult {
    notation: string;
    result: number;
    rolls: number[];
    total: number;
    modifier: number;
    purpose?: string;
    character_name?: string;
}

export interface AiDmResponse {
    response: string;
    context_used: any;
    suggestions?: string[];
}

export interface GameSessionState {
    current_scene: string;
    initiative_order: InitiativeEntry[];
    environment: {
        lighting: 'bright' | 'dim' | 'dark';
        weather?: string;
        terrain?: string;
    };
    time: {
        in_game_date: string;
        session_duration: number;
        turn_number: number;
    };
}

export interface GamePlayer {
    user_id: string;
    character_id: string;
    username: string;
    character_name: string;
    is_online: boolean;
    initiative?: number;
    current_hp?: number;
    max_hp?: number;
}

export interface InitiativeEntry {
    character_id: string;
    character_name: string;
    initiative: number;
    is_player: boolean;
    is_active: boolean;
}

class GameService {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ù–∞—á–∞—Ç—å –∏–≥—Ä—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    async startGame(data: StartGameData): Promise<{ id: string; isNew: boolean }> {
        try {
            console.log('üéÆ Starting game with data:', data);

            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–≥—Ä—ã –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏
            let existingGames: GameResponse[] = [];
            try {
                existingGames = await this.getGames({
                    campaign_id: data.campaign_id,
                    status_filter: 'active'
                });
            } catch (error) {
                console.log('üìù No existing games found, will create new one');
                existingGames = [];
            }

            // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –Ω–µ–π
            if (existingGames && existingGames.length > 0) {
                const activeGame = existingGames[0];
                console.log('üîÑ Joining existing game:', activeGame.id);

                try {
                    await this.joinGame(activeGame.id, { character_id: data.character_id });
                    return { id: activeGame.id, isNew: false };
                } catch (joinError) {
                    console.log('‚ùå Failed to join existing game, creating new one');
                }
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
            console.log('üÜï Creating new game for campaign:', data.campaign_id);
            const newGame = await this.createGame({
                campaign_id: data.campaign_id,
                name: `–ò–≥—Ä–∞`,
                description: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∏–≥—Ä–∞`,
                max_players: 6,
            });

            console.log('‚úÖ New game created:', newGame.id);

            // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –Ω–æ–≤–æ–π –∏–≥—Ä–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
            await this.joinGame(newGame.id, { character_id: data.character_id });

            return { id: newGame.id, isNew: true };

        } catch (error) {
            console.error('‚ùå Error in startGame:', error);
            throw error;
        }
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É (—É–±–∏—Ä–∞–µ–º /api –ø—Ä–µ—Ñ–∏–∫—Å)
    async createGame(data: CreateGameData): Promise<GameResponse> {
        return apiService.post('/games', data);
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä (—É–±–∏—Ä–∞–µ–º /api –ø—Ä–µ—Ñ–∏–∫—Å)
    async getGames(params: GetGamesParams = {}): Promise<GameResponse[]> {
        const queryParams = new URLSearchParams();

        if (params.status_filter) {
            queryParams.append('status_filter', params.status_filter);
        }
        if (params.campaign_id) {
            queryParams.append('campaign_id', params.campaign_id);
        }
        if (params.limit) {
            queryParams.append('limit', params.limit.toString());
        }
        if (params.offset) {
            queryParams.append('offset', params.offset.toString());
        }

        const queryString = queryParams.toString();
        const url = queryString ? `/games?${queryString}` : '/games';

        return apiService.get(url);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä—ã –ø–æ –∫–∞–º–ø–∞–Ω–∏–∏
    async getGamesByCampaign(campaignId: string): Promise<GameResponse[]> {
        return this.getGames({ campaign_id: campaignId });
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã
    async getActiveGames(): Promise<GameResponse[]> {
        return this.getGames({ status_filter: 'active' });
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä—É –ø–æ ID (—É–±–∏—Ä–∞–µ–º /api –ø—Ä–µ—Ñ–∏–∫—Å)
    async getGame(gameId: string): Promise<GameDetailResponse> {
        return apiService.get(`/games/${gameId}`);
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –û–±–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É (—É–±–∏—Ä–∞–µ–º /api –ø—Ä–µ—Ñ–∏–∫—Å)
    async updateGame(gameId: string, data: UpdateGameData): Promise<GameDetailResponse> {
        return apiService.put(`/games/${gameId}`, data);
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ (—É–±–∏—Ä–∞–µ–º /api –ø—Ä–µ—Ñ–∏–∫—Å)
    async joinGame(gameId: string, data: JoinGameData = {}): Promise<{ message: string }> {
        return apiService.post(`/games/${gameId}/join`, data);
    }

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É (—É–±–∏—Ä–∞–µ–º /api –ø—Ä–µ—Ñ–∏–∫—Å)
    async leaveGame(gameId: string): Promise<{ message: string }> {
        return apiService.post(`/games/${gameId}/leave`);
    }

    // –ù–∞—á–∞—Ç—å –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
    async startSession(gameId: string): Promise<{ message: string }> {
        return apiService.post(`/games/${gameId}/start`);
    }

    // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é
    async endSession(gameId: string): Promise<{ message: string }> {
        return apiService.post(`/games/${gameId}/end`);
    }

    // –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É
    async pauseGame(gameId: string): Promise<{ message: string }> {
        return apiService.post(`/games/${gameId}/pause`);
    }

    // –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É
    async resumeGame(gameId: string): Promise<{ message: string }> {
        return apiService.post(`/games/${gameId}/resume`);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –∏–≥—Ä—ã
    async getGamePlayers(gameId: string): Promise<GamePlayer[]> {
        return apiService.get(`/games/${gameId}/players`);
    }

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏–≥—Ä–æ–≤–æ–π —á–∞—Ç
    async sendMessage(gameId: string, message: string, messageType: string = 'chat'): Promise<void> {
        return apiService.post(`/games/${gameId}/messages`, {
            message,
            type: messageType,
        });
    }

    // –ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏
    async rollDice(gameId: string, diceData: DiceRollData): Promise<DiceRollResult> {
        return apiService.post(`/games/${gameId}/roll`, diceData);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI DM
    async getAiResponse(gameId: string, message: string, context?: any): Promise<AiDmResponse> {
        return apiService.post(`/games/${gameId}/ai-response`, {
            message,
            context,
        });
    }

    // –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    async updateSessionState(gameId: string, state: Partial<GameSessionState>): Promise<GameSessionState> {
        return apiService.put(`/games/${gameId}/session-state`, state);
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
    async getSessionState(gameId: string): Promise<GameSessionState> {
        return apiService.get(`/games/${gameId}/session-state`);
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É
    async updateInitiative(gameId: string, initiative: InitiativeEntry[]): Promise<{ message: string }> {
        return apiService.put(`/games/${gameId}/initiative`, { initiative });
    }

    // –°–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥
    async nextTurn(gameId: string): Promise<{ current_turn: InitiativeEntry }> {
        return apiService.post(`/games/${gameId}/next-turn`);
    }

    // –û–±–Ω–æ–≤–∏—Ç—å HP –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    async updateCharacterHp(gameId: string, characterId: string, hp: number): Promise<{ message: string }> {
        return apiService.put(`/games/${gameId}/characters/${characterId}/hp`, { hp });
    }

    // –î–æ–±–∞–≤–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –∫ –ø–µ—Ä—Å–æ–Ω–∞–∂—É
    async addCharacterEffect(gameId: string, characterId: string, effect: any): Promise<{ message: string }> {
        return apiService.post(`/games/${gameId}/characters/${characterId}/effects`, effect);
    }

    // –£–¥–∞–ª–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    async removeCharacterEffect(gameId: string, characterId: string, effectId: string): Promise<{ message: string }> {
        return apiService.delete(`/games/${gameId}/characters/${characterId}/effects/${effectId}`);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–≥—Ä—ã
    async getGameHistory(gameId: string, limit: number = 50, offset: number = 0): Promise<GameMessage[]> {
        return apiService.get(`/games/${gameId}/history?limit=${limit}&offset=${offset}`);
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É
    async saveGame(gameId: string): Promise<{ message: string, save_id: string }> {
        return apiService.post(`/games/${gameId}/save`);
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É
    async loadGame(gameId: string, saveId: string): Promise<{ message: string }> {
        return apiService.post(`/games/${gameId}/load`, { save_id: saveId });
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã
    async getGameStats(gameId: string): Promise<any> {
        return apiService.get(`/games/${gameId}/stats`);
    }

    // –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É
    async deleteGame(gameId: string): Promise<{ message: string }> {
        return apiService.delete(`/games/${gameId}`);
    }

    // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä—É
    async archiveGame(gameId: string): Promise<{ message: string }> {
        return apiService.post(`/games/${gameId}/archive`);
    }

    // –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –∏–≥—Ä—É
    async invitePlayer(gameId: string, userId: string): Promise<{ message: string }> {
        return apiService.post(`/games/${gameId}/invite`, { user_id: userId });
    }

    // –ò—Å–∫–ª—é—á–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –∏–≥—Ä—ã
    async kickPlayer(gameId: string, userId: string): Promise<{ message: string }> {
        return apiService.post(`/games/${gameId}/kick`, { user_id: userId });
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
    async updateGameSettings(gameId: string, settings: any): Promise<{ message: string }> {
        return apiService.put(`/games/${gameId}/settings`, settings);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
    async getGameSettings(gameId: string): Promise<any> {
        return apiService.get(`/games/${gameId}/settings`);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const gameService = new GameService();
export default gameService;