import axios, { AxiosInstance, AxiosResponse, AxiosError } from 'axios';
import { getFromStorage, setToStorage, removeFromStorage } from '@/utils';
import type { AuthTokens, ApiResponse } from '@/types';

// API configuration
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:8000';

class ApiService {
    private api: AxiosInstance;

    constructor() {
        this.api = axios.create({
            // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ baseURL –¥–ª—è dev –∏ production
            baseURL: `${API_BASE_URL}/api`,
            timeout: 60000, // ‚úÖ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥
            headers: {
                'Content-Type': 'application/json',
            },
        });

        this.setupInterceptors();
    }

    private setupInterceptors() {
        // Request interceptor to add auth token
        this.api.interceptors.request.use(
            (config) => {
                // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ development
                if (import.meta.env.DEV) {
                    console.log('üîÑ API Request:', config.method?.toUpperCase(), config.url);
                }

                const tokens = this.getTokens();
                if (tokens?.access_token) {
                    config.headers.Authorization = `Bearer ${tokens.access_token}`;
                }
                return config;
            },
            (error) => Promise.reject(error)
        );

        // Response interceptor to handle token refresh and errors
        this.api.interceptors.response.use(
            (response) => {
                // ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ development
                if (import.meta.env.DEV) {
                    console.log('‚úÖ API Response:', response.config.method?.toUpperCase(), response.config.url, response.status);
                }
                return response;
            },
            async (error: AxiosError) => {
                const originalRequest = error.config as any;

                // ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
                if (import.meta.env.DEV) {
                    console.error('‚ùå API Error:', {
                        method: originalRequest?.method?.toUpperCase(),
                        url: originalRequest?.url,
                        status: error.response?.status,
                        message: error.message,
                        data: error.response?.data,
                    });
                }

                // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
                if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {
                    console.error('‚è∞ Request timeout:', originalRequest?.url);
                    return Promise.reject(new Error(`–ó–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (${this.api.defaults.timeout}ms). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.`));
                }

                // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
                if (error.code === 'ERR_NETWORK' || !error.response) {
                    console.error('üåê Network error:', error.message);
                    return Promise.reject(new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞.'));
                }

                if (error.response?.status === 401 && !originalRequest._retry) {
                    originalRequest._retry = true;

                    try {
                        const tokens = this.getTokens();
                        if (tokens?.refresh_token) {
                            const newTokens = await this.refreshToken(tokens.refresh_token);
                            this.setTokens(newTokens);

                            // Retry original request with new token
                            originalRequest.headers.Authorization = `Bearer ${newTokens.access_token}`;
                            return this.api(originalRequest);
                        }
                    } catch (refreshError) {
                        // Refresh failed, logout user
                        this.clearTokens();
                        window.location.href = '/login';
                        return Promise.reject(refreshError);
                    }
                }

                // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫ –¥–ª—è –∏–≥—Ä
                if (error.response?.status === 404 && originalRequest?.url?.includes('/games/')) {
                    return Promise.reject(new Error('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞'));
                }

                // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ 403 –æ—à–∏–±–æ–∫
                if (error.response?.status === 403) {
                    return Promise.reject(new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è'));
                }

                // ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ 500 –æ—à–∏–±–æ–∫
                if (error.response?.status >= 500) {
                    return Promise.reject(new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'));
                }

                return Promise.reject(error);
            }
        );
    }

    // Token management
    private getTokens(): AuthTokens | null {
        return getFromStorage<AuthTokens | null>('auth_tokens', null);
    }

    private setTokens(tokens: AuthTokens): void {
        setToStorage('auth_tokens', tokens);
    }

    private clearTokens(): void {
        removeFromStorage('auth_tokens');
    }

    // Auth methods
    async login(credentials: { username: string; password: string }): Promise<AuthTokens> {
        const response = await this.api.post<AuthTokens>('/auth/login', credentials);
        this.setTokens(response.data);
        return response.data;
    }

    async register(userData: {
        username: string;
        email: string;
        password: string;
        display_name?: string;
    }): Promise<AuthTokens> {
        const response = await this.api.post<AuthTokens>('/auth/register', userData);
        this.setTokens(response.data);
        return response.data;
    }

    async logout(): Promise<void> {
        try {
            await this.api.post('/auth/logout');
        } finally {
            this.clearTokens();
        }
    }

    private async refreshToken(refreshToken: string): Promise<AuthTokens> {
        const response = await this.api.post<AuthTokens>('/auth/refresh', {
            refresh_token: refreshToken,
        });
        return response.data;
    }

    async getCurrentUser() {
        const response = await this.api.get('/auth/me');
        return response.data;
    }

    async changePassword(oldPassword: string, newPassword: string): Promise<void> {
        await this.api.post('/auth/change-password', {
            old_password: oldPassword,
            new_password: newPassword,
        });
    }

    // ‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
    async getWithExtendedTimeout<T>(url: string, params?: any, timeoutMs: number = 120000): Promise<T> {
        const response = await this.api.get<T>(url, {
            params,
            timeout: timeoutMs,
        });
        return response.data;
    }

    async postWithExtendedTimeout<T>(url: string, data?: any, timeoutMs: number = 120000): Promise<T> {
        const response = await this.api.post<T>(url, data, {
            timeout: timeoutMs,
        });
        return response.data;
    }

    // Generic API methods
    async get<T>(url: string, params?: any): Promise<T> {
        const response = await this.api.get<T>(url, { params });
        return response.data;
    }

    async post<T>(url: string, data?: any): Promise<T> {
        const response = await this.api.post<T>(url, data);
        return response.data;
    }

    async put<T>(url: string, data?: any): Promise<T> {
        const response = await this.api.put<T>(url, data);
        return response.data;
    }

    async patch<T>(url: string, data?: any): Promise<T> {
        const response = await this.api.patch<T>(url, data);
        return response.data;
    }

    async delete<T>(url: string): Promise<T> {
        const response = await this.api.delete<T>(url);
        return response.data;
    }

    // File upload method
    async uploadFile<T>(url: string, file: File, onProgress?: (progress: number) => void): Promise<T> {
        const formData = new FormData();
        formData.append('file', file);

        const response = await this.api.post<T>(url, formData, {
            headers: {
                'Content-Type': 'multipart/form-data',
            },
            timeout: 300000, // 5 –º–∏–Ω—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
            onUploadProgress: (progressEvent) => {
                if (onProgress && progressEvent.total) {
                    const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);
                    onProgress(progress);
                }
            },
        });

        return response.data;
    }

    // ‚úÖ Health check —Å –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    async healthCheck(): Promise<{ status: string; services: Record<string, string> }> {
        try {
            // –î–ª—è health check –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π URL –±–µ–∑ proxy
            const response = await axios.get(`${API_BASE_URL}/health`, {
                timeout: 10000, // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è health check
            });
            return response.data;
        } catch (error) {
            console.error('Health check failed:', error);
            throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
    }

    // Get auth status without making request if no token
    isAuthenticated(): boolean {
        const tokens = this.getTokens();
        return !!tokens?.access_token;
    }

    // Get base URL for static files
    getStaticUrl(path: string): string {
        return `${API_BASE_URL}/static/${path}`;
    }

    // ‚úÖ –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    async checkServerAvailability(): Promise<boolean> {
        try {
            await this.healthCheck();
            return true;
        } catch {
            return false;
        }
    }

    // ‚úÖ Retry –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    async retryRequest<T>(
        requestFn: () => Promise<T>,
        maxRetries: number = 3,
        delay: number = 1000
    ): Promise<T> {
        let lastError: Error;

        for (let attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                return await requestFn();
            } catch (error: any) {
                lastError = error;

                // –ù–µ —Ä–µ—Ç—Ä–∞–∏–º 401, 403, 404 –æ—à–∏–±–∫–∏
                if (error.response?.status && [401, 403, 404].includes(error.response.status)) {
                    throw error;
                }

                if (attempt < maxRetries) {
                    console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ ${delay}ms...`);
                    await new Promise(resolve => setTimeout(resolve, delay * attempt));
                } else {
                    console.error(`–í—Å–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ —É–¥–∞–ª–∏—Å—å`);
                }
            }
        }

        throw lastError!;
    }
}

// Export singleton instance
export const apiService = new ApiService();
export default apiService;