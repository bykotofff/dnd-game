import { apiService } from './api';
import type { CharacterResponse } from '@/types/';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
export interface CreateCharacterData {
    name: string;
    race: string;
    character_class: string;
    subclass?: string;
    background?: string;
    alignment?: string;

    // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    strength?: number;
    dexterity?: number;
    constitution?: number;
    intelligence?: number;
    wisdom?: number;
    charisma?: number;

    // –û–ø–∏—Å–∞–Ω–∏–µ
    appearance?: string;
    personality_traits?: string;
    ideals?: string;
    bonds?: string;
    flaws?: string;
    backstory?: string;
}

export interface UpdateCharacterData {
    name?: string;
    level?: number;
    experience_points?: number;

    // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    strength?: number;
    dexterity?: number;
    constitution?: number;
    intelligence?: number;
    wisdom?: number;
    charisma?: number;

    // HP –∏ –∑–∞—â–∏—Ç–∞
    max_hit_points?: number;
    current_hit_points?: number;
    temporary_hit_points?: number;
    armor_class?: number;

    // –ù–∞–≤—ã–∫–∏ –∏ –≤–ª–∞–¥–µ–Ω–∏—è
    skills?: Record<string, boolean>;
    proficiencies?: Record<string, any>;

    // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
    inventory?: Record<string, any>;

    // –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è
    spells?: Record<string, any>;

    // –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã
    features?: Array<Record<string, any>>;
    active_effects?: Array<Record<string, any>>;

    // –û–ø–∏—Å–∞–Ω–∏–µ
    appearance?: string;
    personality_traits?: string;
    ideals?: string;
    bonds?: string;
    flaws?: string;
    backstory?: string;
}

// ‚úÖ –ù–û–í–´–ô –ò–ù–¢–ï–†–§–ï–ô–° –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
export interface DetailedCharacterResponse extends CharacterResponse {
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
    subclass?: string;
    alignment?: string;
    experience_points: number;

    // –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    strength: number;
    dexterity: number;
    constitution: number;
    intelligence: number;
    wisdom: number;
    charisma: number;

    // –ë–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    current_hit_points: number;
    max_hit_points: number;
    temporary_hit_points: number;
    armor_class: number;
    proficiency_bonus: number;
    speed: number;

    // –ù–∞–≤—ã–∫–∏ –∏ –≤–ª–∞–¥–µ–Ω–∏—è
    saving_throws: Record<string, boolean>;
    skills: Record<string, boolean>;
    proficiencies: {
        armor: string[];
        weapons: string[];
        tools: string[];
        languages: string[];
    };

    // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
    inventory: {
        items: any[];
        equipment: Record<string, any>;
        currency: {
            cp: number;
            sp: number;
            ep: number;
            gp: number;
            pp: number;
        };
    };

    // –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è (–¥–ª—è –∫–∞—Å—Ç–µ—Ä–æ–≤)
    spells: {
        known: any[];
        prepared: any[];
        slots: Record<string, number>;
    };

    // –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏ —á–µ—Ä—Ç—ã
    features: any[];
    active_effects: any[];

    // –í–Ω–µ—à–Ω–æ—Å—Ç—å –∏ –ª–∏—á–Ω–æ—Å—Ç—å
    appearance?: string;
    personality_traits?: string;
    ideals?: string;
    bonds?: string;
    flaws?: string;
    backstory?: string;

    // –ü–æ—Ä—Ç—Ä–µ—Ç
    portrait_url?: string;

    // –°—Ç–∞—Ç—É—Å
    is_active: boolean;
    is_alive: boolean;

    // –î–∞—Ç—ã
    updated_at: string;
}

class CharacterService {
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    async createCharacter(data: CreateCharacterData): Promise<CharacterResponse> {
        return apiService.post('/characters', data);
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async getCharacters(): Promise<CharacterResponse[]> {
        return apiService.get('/characters');
    }

    // –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ ID —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    async getCharacter(characterId: string): Promise<DetailedCharacterResponse> {
        return apiService.get(`/characters/${characterId}`);
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    async updateCharacter(characterId: string, data: UpdateCharacterData): Promise<DetailedCharacterResponse> {
        return apiService.put(`/characters/${characterId}`, data);
    }

    // –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    async deleteCharacter(characterId: string): Promise<{ message: string }> {
        return apiService.delete(`/characters/${characterId}`);
    }

    // ‚úÖ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–∞–º–∏

    // –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∏–≥—Ä—ã (–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∂–∏–≤—ã—Ö)
    async getAvailableCharacters(): Promise<CharacterResponse[]> {
        const characters = await this.getCharacters();
        return characters.filter(char => char.is_alive);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
    async getCharactersForCampaign(campaignId: string, startingLevel?: number): Promise<CharacterResponse[]> {
        const characters = await this.getAvailableCharacters();

        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∫–∞–º–ø–∞–Ω–∏–∏
        if (startingLevel) {
            return characters.filter(char =>
                char.level >= startingLevel - 1 && char.level <= startingLevel + 2
            );
        }

        return characters;
    }

    // ‚úÖ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç—Ä–µ—Ç–∞–º–∏

    // –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—Ä–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    async generatePortrait(characterId: string, customPrompt?: string): Promise<{ portrait_url: string }> {
        return apiService.post(`/characters/${characterId}/generate-portrait`, {
            custom_prompt: customPrompt
        });
    }

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–æ—Ä—Ç—Ä–µ—Ç
    async uploadPortrait(characterId: string, file: File): Promise<{ portrait_url: string }> {
        const formData = new FormData();
        formData.append('portrait', file);

        return apiService.postFormData(`/characters/${characterId}/upload-portrait`, formData);
    }

    // ‚úÖ –ù–û–í–´–ï –ú–ï–¢–û–î–´ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    async getCharacterStats(characterId: string): Promise<{
        games_played: number;
        total_playtime: number;
        dice_rolls_made: number;
        critical_hits: number;
        critical_fails: number;
        damage_dealt: number;
        damage_taken: number;
        healing_done: number;
        spells_cast: number;
        skills_used: Record<string, number>;
    }> {
        return apiService.get(`/characters/${characterId}/stats`);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∏–≥—Ä–∞—Ö
    async getCharacterGameHistory(characterId: string): Promise<Array<{
        game_id: string;
        game_name: string;
        campaign_name: string;
        session_date: string;
        duration: number;
        level_gained: boolean;
        major_events: string[];
    }>> {
        return apiService.get(`/characters/${characterId}/game-history`);
    }

    // ‚úÖ –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –ú–ï–¢–û–î–´

    // –í—ã—á–∏—Å–ª–∏—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    static getAbilityModifier(abilityScore: number): number {
        return Math.floor((abilityScore - 10) / 2);
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    static formatModifier(modifier: number): string {
        return modifier >= 0 ? `+${modifier}` : `${modifier}`;
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è
    static getHealthColor(current: number, max: number): 'green' | 'yellow' | 'orange' | 'red' {
        const percentage = (current / max) * 100;
        if (percentage > 75) return 'green';
        if (percentage > 50) return 'yellow';
        if (percentage > 25) return 'orange';
        return 'red';
    }

    // –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –∫–ª–∞—Å—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    static getClassIcon(characterClass: string): string {
        const icons: Record<string, string> = {
            fighter: '‚öîÔ∏è',
            wizard: 'üîÆ',
            rogue: 'üó°Ô∏è',
            cleric: '‚õ™',
            ranger: 'üèπ',
            paladin: 'üõ°Ô∏è',
            barbarian: '‚ö°',
            bard: 'üéµ',
            druid: 'üåø',
            monk: 'üëä',
            sorcerer: '‚ú®',
            warlock: 'üëπ',
        };
        return icons[characterClass.toLowerCase()] || 'üßô';
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–µ—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–∞–º–ø–∞–Ω–∏–∏
    static canCharacterJoinCampaign(
        character: CharacterResponse,
        campaignRequirements: {
            starting_level?: number;
            max_level?: number;
            allowed_races?: string[];
            allowed_classes?: string[];
            homebrew_allowed?: boolean;
        }
    ): { canJoin: boolean; reasons: string[] } {
        const reasons: string[] = [];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è
        if (campaignRequirements.starting_level && character.level < campaignRequirements.starting_level) {
            reasons.push(`–£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (${character.level}) –º–µ–Ω—å—à–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ (${campaignRequirements.starting_level})`);
        }

        if (campaignRequirements.max_level && character.level > campaignRequirements.max_level) {
            reasons.push(`–£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (${character.level}) –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ (${campaignRequirements.max_level})`);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—ã
        if (campaignRequirements.allowed_races && !campaignRequirements.allowed_races.includes(character.race)) {
            reasons.push(`–†–∞—Å–∞ "${character.race}" –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –≤ —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏`);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Å–∞
        if (campaignRequirements.allowed_classes && !campaignRequirements.allowed_classes.includes(character.character_class)) {
            reasons.push(`–ö–ª–∞—Å—Å "${character.character_class}" –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω –≤ —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏`);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        if (!character.is_alive) {
            reasons.push('–ü–µ—Ä—Å–æ–Ω–∞–∂ –º–µ—Ä—Ç–≤');
        }

        return {
            canJoin: reasons.length === 0,
            reasons
        };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const characterService = new CharacterService();
export default characterService;