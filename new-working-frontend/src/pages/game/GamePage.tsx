import React, { useEffect, useState, useCallback, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { motion, AnimatePresence } from 'framer-motion';
import {
    ArrowLeftIcon,
    Cog6ToothIcon,
    WifiIcon,
    ExclamationTriangleIcon,
    CheckCircleIcon,
    PaperAirplaneIcon,
    EyeIcon,
    MagnifyingGlassIcon,
    SpeakerWaveIcon,
    UsersIcon,
    ChatBubbleLeftIcon,
    CubeIcon,
    ChevronDownIcon,
    ChevronUpIcon,
    SpeakerXMarkIcon,
    MapIcon,
    SparklesIcon,
    FireIcon,
    HeartIcon,
    ShieldCheckIcon,
    StarIcon,
    BoltIcon,
    MoonIcon,
    SunIcon,
    CloudIcon,
    BeakerIcon,
    BookOpenIcon,
    UserIcon,
    UserCircleIcon,
    MicrophoneIcon,
    VideoCameraIcon,
    PhoneIcon,
    PhoneXMarkIcon,
    PlayIcon,
    PauseIcon,
    EllipsisVerticalIcon,
    CommandLineIcon
} from '@heroicons/react/24/outline';
import {
    CheckCircleIcon as CheckCircleSolid,
    WifiIcon as WifiSolid,
    HeartIcon as HeartSolid,
    ShieldCheckIcon as ShieldCheckSolid,
    StarIcon as StarSolid,
    UserIcon as UserSolid,
    MoonIcon as MoonSolid,
    SunIcon as SunSolid,
    CloudIcon as CloudSolid,
    FireIcon as FireSolid,
    BoltIcon as BoltSolid
} from '@heroicons/react/24/solid';

// –ò–º–ø–æ—Ä—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
import { useGameStore } from '../../store/gameStore';
import { useAuth } from '../../store/authStore';
import { gameService } from '../../services/gameService';
import { websocketService } from '../../services/websocketService';

// ‚úÖ –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
import { PlayersList } from '../../components/game/PlayersList';
import type { PlayerInfo, WebSocketGameState } from '../../types/game';

// –ë–∞–∑–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Button
const Button = ({
                    children,
                    onClick,
                    variant = 'default',
                    size = 'default',
                    className = '',
                    disabled = false,
                    type = 'button',
                    ...props
                }) => {
    const baseStyles = 'inline-flex items-center justify-center rounded-md font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';
    const variants = {
        default: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',
        ghost: 'text-gray-400 hover:bg-gray-700 hover:text-white focus:ring-gray-500',
        outline: 'border border-gray-600 text-gray-300 hover:bg-gray-700 focus:ring-gray-500',
        secondary: 'bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500',
        danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',
        success: 'bg-green-600 text-white hover:bg-green-700 focus:ring-green-500',
        warning: 'bg-yellow-600 text-white hover:bg-yellow-700 focus:ring-yellow-500',
        magic: 'bg-purple-600 text-white hover:bg-purple-700 focus:ring-purple-500',
        dice: 'bg-gradient-to-r from-blue-500 to-purple-600 text-white hover:from-blue-600 hover:to-purple-700 focus:ring-blue-500'
    };
    const sizes = {
        xs: 'px-2 py-1 text-xs',
        sm: 'px-3 py-1.5 text-sm',
        default: 'px-4 py-2 text-sm',
        lg: 'px-6 py-3 text-base',
        xl: 'px-8 py-4 text-lg'
    };

    return (
        <button
            type={type}
            onClick={onClick}
            disabled={disabled}
            className={`${baseStyles} ${variants[variant]} ${sizes[size]} ${className}`}
            {...props}
        >
            {children}
        </button>
    );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É–±–∏–∫–∞
const DiceIcon = ({ sides, className = "w-6 h-6" }) => {
    const diceVariants = {
        d4: "üî∫",
        d6: "‚öÄ",
        d8: "üî∂",
        d10: "üîü",
        d12: "üîÆ",
        d20: "üé≤",
        d100: "üíØ"
    };

    return (
        <span className={`${className} inline-flex items-center justify-center text-lg`}>
            {diceVariants[sides] || 'üé≤'}
        </span>
    );
};

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô PlayerCard –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
const PlayerCard = ({ player, isCurrentUser = false, isOnline = true, className = "" }) => {
    const statusColor = isOnline ? "bg-green-500" : "bg-gray-400";
    const borderColor = isCurrentUser ? "border-blue-500" : "border-gray-600";

    // ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ —Å—Ç–∞—Ä–æ–≥–æ, —Ç–∞–∫ –∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
    const characterName = player.character_name || player.name;
    const username = player.username || player.user_name;
    const characterInfo = player.character_info;

    return (
        <div className={`
            relative p-3 rounded-lg border-2 transition-all duration-200 
            ${borderColor} 
            ${isCurrentUser ? 'bg-blue-50 dark:bg-blue-900/20' : 'bg-white dark:bg-gray-800'}
            ${className}
        `}>
            <div className="flex items-center space-x-3">
                <div className="relative">
                    <div className="w-10 h-10 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-bold">
                        {characterName?.[0] || username?.[0] || 'U'}
                    </div>
                    <div className={`absolute -bottom-1 -right-1 w-3 h-3 rounded-full border-2 border-white dark:border-gray-800 ${statusColor}`}></div>
                </div>
                <div className="flex-1 min-w-0">
                    <div className="flex items-center space-x-2">
                        <p className="font-medium text-gray-900 dark:text-white truncate">
                            {/* ‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –µ—Å–ª–∏ –µ—Å—Ç—å */}
                            {characterName || username || '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂'}
                        </p>
                        {isCurrentUser && (
                            <span className="px-2 py-1 text-xs bg-blue-500 text-white rounded-full">–í—ã</span>
                        )}
                    </div>
                    {/* ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º username –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂ */}
                    {characterName && username && (
                        <p className="text-sm text-gray-600 dark:text-gray-400 truncate">
                            @{username}
                        </p>
                    )}
                    {/* ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ */}
                    {characterInfo && (
                        <div className="mt-1 space-y-1">
                            <p className="text-xs text-gray-500 dark:text-gray-400">
                                {characterInfo.race} {characterInfo.character_class} {characterInfo.level} —É—Ä.
                            </p>
                            {characterInfo.current_hit_points !== undefined && (
                                <div className="flex items-center space-x-2">
                                    <HeartSolid className="w-3 h-3 text-red-500" />
                                    <span className="text-xs text-gray-600 dark:text-gray-400">
                                        {characterInfo.current_hit_points}/{characterInfo.max_hit_points}
                                    </span>
                                    {characterInfo.armor_class && (
                                        <>
                                            <ShieldCheckSolid className="w-3 h-3 text-blue-500 ml-2" />
                                            <span className="text-xs text-gray-600 dark:text-gray-400">
                                                AC {characterInfo.armor_class}
                                            </span>
                                        </>
                                    )}
                                </div>
                            )}
                        </div>
                    )}
                    {/* ‚úÖ Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ */}
                    {!characterInfo && (player.current_hp !== undefined && player.max_hp !== undefined) && (
                        <div className="flex items-center space-x-2 mt-1">
                            <HeartSolid className="w-4 h-4 text-red-500" />
                            <span className="text-sm text-gray-600 dark:text-gray-400">
                                {player.current_hp}/{player.max_hp}
                            </span>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô ChatMessage –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
const ChatMessage = ({ message, isCurrentUser = false }) => {
    const messageTime = new Date(message.timestamp).toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
    });

    const getMessageIcon = () => {
        switch (message.type) {
            case 'action':
            case 'player_action':
                return <CommandLineIcon className="w-4 h-4 text-purple-500" />;
            case 'roll':
            case 'dice_roll':
                return <CubeIcon className="w-4 h-4 text-blue-500" />;
            case 'dm':
            case 'ai_response':
            case 'ai_dm':
                return <SparklesIcon className="w-4 h-4 text-yellow-500" />;
            case 'ooc':
                return <ChatBubbleLeftIcon className="w-4 h-4 text-gray-500" />;
            case 'system':
                return <ExclamationTriangleIcon className="w-4 h-4 text-blue-500" />;
            default:
                return <UserIcon className="w-4 h-4 text-gray-500" />;
        }
    };

    const getMessageColor = () => {
        switch (message.type) {
            case 'action':
            case 'player_action':
                return 'text-purple-600 dark:text-purple-400';
            case 'roll':
            case 'dice_roll':
                return 'text-blue-600 dark:text-blue-400';
            case 'dm':
            case 'ai_response':
            case 'ai_dm':
                return 'text-yellow-600 dark:text-yellow-400';
            case 'ooc':
                return 'text-gray-600 dark:text-gray-400';
            case 'system':
                return 'text-blue-600 dark:text-blue-400';
            default:
                return 'text-gray-900 dark:text-white';
        }
    };

    const getMessageBackground = () => {
        switch (message.type) {
            case 'dm':
            case 'ai_response':
            case 'ai_dm':
                return 'bg-yellow-50 dark:bg-yellow-900/20 border-yellow-200 dark:border-yellow-800';
            case 'action':
            case 'player_action':
                return 'bg-purple-50 dark:bg-purple-900/20 border-purple-200 dark:border-purple-800';
            case 'system':
                return 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800';
            case 'roll':
            case 'dice_roll':
                return 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800';
            default:
                return isCurrentUser
                    ? 'bg-blue-500 text-white'
                    : 'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700';
        }
    };

    return (
        <div className={`flex ${isCurrentUser ? 'justify-end' : 'justify-start'} mb-4`}>
            <div className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg border ${getMessageBackground()}`}>
                <div className="flex items-center space-x-2 mb-1">
                    {getMessageIcon()}
                    <span className={`font-medium text-sm ${getMessageColor()}`}>
                        {/* ‚úÖ –ü–†–ò–û–†–ò–¢–ï–¢: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º sender_name (–∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞) –µ—Å–ª–∏ –µ—Å—Ç—å */}
                        {message.sender_name || message.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}
                    </span>
                    <span className="text-xs text-gray-500">{messageTime}</span>
                </div>
                <div className={`text-sm ${isCurrentUser && message.type === 'chat' ? 'text-white' : 'text-gray-800 dark:text-gray-200'}`}>
                    {message.content || message.message}
                </div>
                {/* ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –±—Ä–æ—Å–∫–æ–≤ */}
                {(message.type === 'dice_roll' || message.type === 'dice_check_result') && message.total && (
                    <div className="mt-1 text-xs text-gray-600 dark:text-gray-400">
                        –†–µ–∑—É–ª—å—Ç–∞—Ç: {message.total}
                        {message.success !== undefined && (
                            <span className={`ml-2 ${message.success ? 'text-green-600' : 'text-red-600'}`}>
                                {message.success ? '‚úì –£—Å–ø–µ—Ö' : '‚úó –ù–µ—É–¥–∞—á–∞'}
                            </span>
                        )}
                    </div>
                )}
            </div>
        </div>
    );
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏
const generateRandomStartLocation = (game) => {
    const locations = [
        {
            name: "–¢–∞–≤–µ—Ä–Ω–∞ '–ó–æ–ª–æ—Ç–æ–π –î—Ä–∞–∫–æ–Ω'",
            description: "–£—é—Ç–Ω–∞—è —Ç–∞–≤–µ—Ä–Ω–∞ —Å —Ç–µ–ø–ª—ã–º –∫–∞–º–∏–Ω–æ–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –±–∞—Ä–º–µ–Ω–æ–º. –ò–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π.",
            weather: "–Ø—Å–Ω–æ",
            time_of_day: "–î–µ–Ω—å",
            ambiance: "–°–ø–æ–∫–æ–π–Ω–æ"
        },
        {
            name: "–†—É–∏–Ω—ã —Å—Ç–∞—Ä–æ–≥–æ —Ö—Ä–∞–º–∞",
            description: "–ü–æ–ª—É—Ä–∞–∑—Ä—É—à–µ–Ω–Ω—ã–π —Ö—Ä–∞–º –∑–∞–±—ã—Ç–æ–≥–æ –±–æ–∂–µ—Å—Ç–≤–∞. –ö–æ–ª–æ–Ω–Ω—ã –ø–æ–∫—Ä—ã—Ç—ã –ø–ª—é—â–æ–º, –∞ –≤ –≤–æ–∑–¥—É—Ö–µ –≤–∏—Ç–∞–µ—Ç –∑–∞–ø–∞—Ö –ª–∞–¥–∞–Ω–∞ –∏ —Ç–∞–π–Ω—ã.",
            weather: "–î–æ–∂–¥—å",
            time_of_day: "–ù–æ—á—å",
            ambiance: "–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏"
        },
        {
            name: "–¢–æ—Ä–≥–æ–≤—ã–π –∫–∞—Ä–∞–≤–∞–Ω",
            description: "–ë–æ–ª—å—à–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π –∫–∞—Ä–∞–≤–∞–Ω –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞ –Ω–æ—á–ª–µ–≥. –¢–µ–ª–µ–≥–∏ –ø–æ–ª–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤, –∞ –∫—É–ø—Ü—ã –æ–±—Å—É–∂–¥–∞—é—Ç –¥–µ–ª–∞ —É –∫–æ—Å—Ç—Ä–∞.",
            weather: "–í–µ—Ç—Ä–µ–Ω–æ",
            time_of_day: "–í–µ—á–µ—Ä",
            ambiance: "–û–∂–∏–≤–ª–µ–Ω–Ω–æ"
        }
    ];

    const randomLocation = locations[Math.floor(Math.random() * locations.length)];

    return {
        location: randomLocation.name,
        description: randomLocation.description,
        weather: randomLocation.weather,
        time_of_day: randomLocation.time_of_day,
        ambiance: randomLocation.ambiance,
        generated: true
    };
};

const GamePage = () => {
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    const { gameId } = useParams();
    const navigate = useNavigate();
    const { user } = useAuth();

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ gameStore
    const {
        currentGame,
        isConnected,
        isConnecting,
        connectionError,
        messages,
        chatMessages,
        currentScene,
        players,
        playersOnline,
        connectToGame,
        disconnectFromGame,
        sendAction,
        sendMessage,
        loadGame,
        rollDice,
        clearGame
    } = useGameStore();

    // ‚úÖ –ù–û–í–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    const [gameState, setGameState] = useState<WebSocketGameState | null>(null);
    const [playersWithCharacters, setPlayersWithCharacters] = useState<Record<string, PlayerInfo>>({});
    const [currentUserCharacter, setCurrentUserCharacter] = useState(null);

    // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const [actionInput, setActionInput] = useState('');
    const [chatInput, setChatInput] = useState('');
    const [showDetails, setShowDetails] = useState(false);
    const [playersCollapsed, setPlayersCollapsed] = useState(false);
    const [soundEnabled, setSoundEnabled] = useState(true);
    const [selectedDice, setSelectedDice] = useState('d20');
    const [diceModifier, setDiceModifier] = useState(0);
    const [isLoadingGame, setIsLoadingGame] = useState(false);
    const [loadError, setLoadError] = useState(null);
    const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
    const [activeTab, setActiveTab] = useState('scene'); // scene, chat, players
    const [generatedScene, setGeneratedScene] = useState(null);

    // Refs –¥–ª—è –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞
    const messagesEndRef = useRef(null);
    const chatEndRef = useRef(null);

    // –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è fallback
    const [localMessages, setLocalMessages] = useState([]);
    const [localPlayers, setLocalPlayers] = useState([]);
    const [connectionAttempts, setConnectionAttempts] = useState(0);
    const [maxConnectionAttempts] = useState(3);
    const [hasTriedConnecting, setHasTriedConnecting] = useState(false);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∫ fallback
    const actualMessages = messages?.length > 0 ? messages : localMessages;
    const actualPlayers = Object.keys(playersWithCharacters).length > 0 ? Object.values(playersWithCharacters) : (players?.length > 0 ? players : localPlayers);
    const actualCurrentScene = currentScene || generatedScene;

    // ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    const handleWebSocketMessage = useCallback((data: any) => {
        try {
            const message = typeof data === 'string' ? JSON.parse(data) : data;

            switch (message.type) {
                case 'game_state':
                    // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö
                    if (message.data) {
                        setGameState(message.data);
                        if (message.data.players) {
                            setPlayersWithCharacters(message.data.players);
                        }
                        if (message.data.your_character) {
                            setCurrentUserCharacter(message.data.your_character);
                        }
                    }
                    break;

                case 'chat_message':
                case 'player_action':
                case 'ai_response':
                case 'system':
                case 'dice_roll_request':
                case 'dice_check_result':
                    // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–º–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                    const gameMessage = {
                        id: `${message.type}-${Date.now()}`,
                        type: message.type,
                        author: message.data.sender_name || message.data.player_name || message.data.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
                        sender_name: message.data.sender_name || message.data.player_name, // ‚úÖ –ù–æ–≤–æ–µ –ø–æ–ª–µ
                        content: message.data.content || message.data.message || message.data.action,
                        timestamp: message.data.timestamp || new Date().toISOString(),
                        // ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –±—Ä–æ—Å–∫–æ–≤
                        total: message.data.total,
                        success: message.data.success,
                        base_roll: message.data.base_roll,
                        modifier: message.data.modifier,
                        dc: message.data.dc
                    };

                    setLocalMessages(prev => [...prev, gameMessage]);
                    break;

                case 'error':
                    console.error('WebSocket error:', message.data.message);
                    break;

                default:
                    console.log('Unknown message type:', message.type);
            }
        } catch (error) {
            console.error('Error parsing WebSocket message:', error);
        }
    }, []);

    // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∫–æ–Ω—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π
    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [actualMessages]);

    useEffect(() => {
        chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [chatMessages]);

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    useEffect(() => {
        if (!gameId || !user?.id) return;

        let isCleanedUp = false;

        const initializeGame = async () => {
            try {
                setIsLoadingGame(true);
                setLoadError(null);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
                const gameData = await gameService.getGame(gameId);
                if (isCleanedUp) return;

                loadGame(gameId);

                // ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
                if (!isConnected && !isConnecting) {
                    setHasTriedConnecting(true);

                    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ WebSocket
                    websocketService.on('message', handleWebSocketMessage);
                    websocketService.on('connect', () => {
                        console.log('Connected to game WebSocket');
                        setConnectionAttempts(0);
                    });
                    websocketService.on('disconnect', () => {
                        console.log('Disconnected from game WebSocket');
                    });
                    websocketService.on('error', (error) => {
                        console.error('WebSocket error:', error);
                        setConnectionAttempts(prev => prev + 1);
                    });

                    await connectToGame(gameId);
                }

            } catch (error) {
                if (!isCleanedUp) {
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã:', error);
                    setLoadError(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É');
                }
            } finally {
                if (!isCleanedUp) {
                    setIsLoadingGame(false);
                }
            }
        };

        initializeGame();

        // Cleanup function
        return () => {
            isCleanedUp = true;
            websocketService.off('message', handleWebSocketMessage);
        };
    }, [gameId, user?.id, connectToGame, loadGame, isConnected, isConnecting, handleWebSocketMessage]);

    // –û—Ç–¥–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    useEffect(() => {
        if (!currentGame || generatedScene) return;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!currentScene) {
            const scene = generateRandomStartLocation(currentGame);
            setGeneratedScene(scene);
        }
    }, [currentGame, currentScene, generatedScene]);

    // –û—Ç–¥–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    useEffect(() => {
        if (!currentGame || actualMessages.length > 0) return;

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        setLocalMessages([
            {
                id: 'welcome',
                type: 'dm',
                author: '–ú–∞—Å—Ç–µ—Ä –∏–≥—Ä—ã',
                content: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "${currentGame.name}"!
                
–°–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ! –í–∞—à–∞ –≥—Ä—É–ø–ø–∞ —Å–æ–±—Ä–∞–ª–∞—Å—å –≤ —É—é—Ç–Ω–æ–π —Ç–∞–≤–µ—Ä–Ω–µ, –æ–±—Å—É–∂–¥–∞—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –¥–µ–ª–∞.`,
                timestamp: new Date().toISOString()
            }
        ]);
    }, [currentGame, actualMessages.length]);

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
    const handleActionSubmit = useCallback((e) => {
        e.preventDefault();
        if (!actionInput.trim() || !isConnected) return;

        // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ WebSocket —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        websocketService.send({
            type: 'player_action',
            action: actionInput.trim()
        });

        setActionInput('');
    }, [actionInput, isConnected]);

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Ç–∞
    const handleChatSubmit = useCallback((e) => {
        e.preventDefault();
        if (!chatInput.trim() || !isConnected) return;

        // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        websocketService.send({
            type: 'chat_message',
            content: chatInput.trim()
        });

        setChatInput('');
    }, [chatInput, isConnected]);

    // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–æ–≤ –∫—É–±–∏–∫–æ–≤
    const handleDiceRoll = useCallback((diceType) => {
        if (!isConnected) return;

        // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—Ä–æ—Å–æ–∫ —á–µ—Ä–µ–∑ WebSocket
        websocketService.send({
            type: 'dice_roll',
            notation: diceType
        });
    }, [isConnected]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const handleReconnect = useCallback(async () => {
        if (connectionAttempts >= maxConnectionAttempts) {
            setLoadError('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
            return;
        }

        try {
            setConnectionAttempts(prev => prev + 1);
            await connectToGame(gameId);
        } catch (error) {
            console.error('Reconnection failed:', error);
        }
    }, [connectionAttempts, maxConnectionAttempts, connectToGame, gameId]);

    // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        return () => {
            // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            disconnectFromGame();
            clearGame();
        };
    }, []);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    if (isLoadingGame && !currentGame) {
        return (
            <div className="min-h-screen bg-gray-900 flex items-center justify-center">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-16 w-16 border-4 border-purple-500 border-t-transparent mx-auto mb-4"></div>
                    <h2 className="text-xl font-semibold text-white mb-2">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã...</h2>
                    <p className="text-gray-400">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É</p>
                </div>
            </div>
        );
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    if (loadError) {
        return (
            <div className="min-h-screen bg-gray-900 flex items-center justify-center">
                <div className="text-center max-w-md">
                    <ExclamationTriangleIcon className="w-16 h-16 text-red-500 mx-auto mb-4" />
                    <h2 className="text-xl font-semibold text-white mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
                    <p className="text-gray-400 mb-4">{loadError}</p>
                    <div className="space-x-3">
                        <Button onClick={handleReconnect} disabled={connectionAttempts >= maxConnectionAttempts}>
                            {connectionAttempts >= maxConnectionAttempts ? '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç' : '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞'}
                        </Button>
                        <Button variant="outline" onClick={() => navigate('/campaigns')}>
                            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞–º–ø–∞–Ω–∏—è–º
                        </Button>
                    </div>
                </div>
            </div>
        );
    }

    if (!currentGame) {
        return (
            <div className="min-h-screen bg-gray-900 flex items-center justify-center">
                <div className="text-center">
                    <h2 className="text-xl font-semibold text-white mb-2">–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h2>
                    <p className="text-gray-400 mb-4">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã</p>
                    <Button onClick={() => navigate('/campaigns')}>
                        –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞–º–ø–∞–Ω–∏—è–º
                    </Button>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gray-900 text-white flex flex-col">
            {/* Header */}
            <div className="bg-gray-800 border-b border-gray-700 px-4 py-3">
                <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                        <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => navigate('/campaigns')}
                            className="text-gray-400 hover:text-white"
                        >
                            <ArrowLeftIcon className="w-4 h-4 mr-2" />
                            –ù–∞–∑–∞–¥
                        </Button>

                        <div>
                            <h1 className="text-lg font-semibold">{currentGame.name}</h1>
                            <div className="flex items-center space-x-2 text-sm">
                                {/* ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
                                <div className="flex items-center space-x-1">
                                    {isConnected ? (
                                        <WifiSolid className="w-4 h-4 text-green-500" />
                                    ) : (
                                        <WifiIcon className="w-4 h-4 text-red-500" />
                                    )}
                                    <span className={isConnected ? 'text-green-400' : 'text-red-400'}>
                                        {isConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : isConnecting ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}
                                    </span>
                                </div>

                                {/* ‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ü–µ–Ω–µ */}
                                {actualCurrentScene?.location && (
                                    <div className="flex items-center space-x-1">
                                        <MapIcon className="w-4 h-4 text-gray-400" />
                                        <span className="text-gray-400">{actualCurrentScene.location}</span>
                                    </div>
                                )}

                                {/* ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω */}
                                <div className="flex items-center space-x-1">
                                    <UsersIcon className="w-4 h-4 text-gray-400" />
                                    <span className="text-gray-400">
                                        {actualPlayers.filter(p => p.is_online !== false).length} –∏–≥—Ä–æ–∫–æ–≤
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div className="flex items-center space-x-2">
                        {/* –ë—ã—Å—Ç—Ä—ã–µ –±—Ä–æ—Å–∫–∏ –∫—É–±–∏–∫–æ–≤ */}
                        <Button
                            variant="dice"
                            size="sm"
                            onClick={() => handleDiceRoll('1d20')}
                            disabled={!isConnected}
                            title="–ë—Ä–æ—Å–∏—Ç—å d20"
                        >
                            <DiceIcon sides="d20" className="w-4 h-4" />
                        </Button>

                        <Button
                            variant="dice"
                            size="sm"
                            onClick={() => handleDiceRoll('1d6')}
                            disabled={!isConnected}
                            title="–ë—Ä–æ—Å–∏—Ç—å d6"
                        >
                            <DiceIcon sides="d6" className="w-4 h-4" />
                        </Button>

                        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
                        <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => setSoundEnabled(!soundEnabled)}
                        >
                            {soundEnabled ? (
                                <SpeakerWaveIcon className="w-4 h-4" />
                            ) : (
                                <SpeakerXMarkIcon className="w-4 h-4" />
                            )}
                        </Button>

                        <Button variant="ghost" size="sm">
                            <Cog6ToothIcon className="w-4 h-4" />
                        </Button>
                    </div>
                </div>
            </div>

            {/* Main Content */}
            <div className="flex-1 flex overflow-hidden">
                {/* Left Panel - Game Messages */}
                <div className="flex-1 flex flex-col min-w-0">
                    {/* Current Scene */}
                    {actualCurrentScene && (
                        <div className="bg-gray-800 border-b border-gray-700 p-4">
                            <div className="flex items-center justify-between mb-2">
                                <h3 className="font-semibold text-lg flex items-center space-x-2">
                                    <MapIcon className="w-5 h-5 text-blue-400" />
                                    <span>–¢–µ–∫—É—â–∞—è —Å—Ü–µ–Ω–∞</span>
                                </h3>
                                <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => setShowDetails(!showDetails)}
                                >
                                    {showDetails ? '–°–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏' : '–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏'}
                                    {showDetails ? (
                                        <ChevronUpIcon className="w-4 h-4 ml-1" />
                                    ) : (
                                        <ChevronDownIcon className="w-4 h-4 ml-1" />
                                    )}
                                </Button>
                            </div>

                            <AnimatePresence>
                                {showDetails && (
                                    <motion.div
                                        initial={{ height: 0, opacity: 0 }}
                                        animate={{ height: 'auto', opacity: 1 }}
                                        exit={{ height: 0, opacity: 0 }}
                                        className="overflow-hidden"
                                    >
                                        <div className="space-y-3">
                                            <div className="flex flex-wrap items-center gap-2 text-sm">
                                                <div className="flex items-center space-x-1">
                                                    <MapIcon className="w-4 h-4 text-gray-500" />
                                                    <span className="font-medium text-white">
                                                        {actualCurrentScene.location}
                                                    </span>
                                                </div>
                                                <div className="flex items-center space-x-1">
                                                    <CloudSolid className="w-4 h-4 text-gray-500" />
                                                    <span className="text-gray-400">
                                                        {actualCurrentScene.weather || '–Ø—Å–Ω–æ'}
                                                    </span>
                                                </div>
                                                <div className="flex items-center space-x-1">
                                                    <SunIcon className="w-4 h-4 text-gray-500" />
                                                    <span className="text-gray-400">
                                                        {actualCurrentScene.time_of_day || '–î–µ–Ω—å'}
                                                    </span>
                                                </div>
                                            </div>

                                            <div className="p-3 bg-gray-700 rounded-lg">
                                                <p className="text-sm text-gray-300 leading-relaxed">
                                                    {actualCurrentScene.description}
                                                </p>
                                                {actualCurrentScene.ambiance && (
                                                    <p className="mt-2 text-xs text-gray-400 italic">
                                                        –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: {actualCurrentScene.ambiance}
                                                    </p>
                                                )}
                                            </div>
                                        </div>
                                    </motion.div>
                                )}
                            </AnimatePresence>
                        </div>
                    )}

                    {/* Messages Area */}
                    <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50 dark:bg-gray-900">
                        {actualMessages.length === 0 ? (
                            <div className="text-center py-8">
                                <SparklesIcon className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                                <p className="text-gray-500 dark:text-gray-400">
                                    –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã...
                                </p>
                            </div>
                        ) : (
                            actualMessages.map((message, index) => (
                                <ChatMessage
                                    key={message.id || index}
                                    message={message}
                                    isCurrentUser={message.author === user?.username || message.sender_name === currentUserCharacter?.name}
                                />
                            ))
                        )}
                        <div ref={messagesEndRef} />
                    </div>

                    {/* Action Input */}
                    <div className="border-t border-gray-700 p-4 bg-gray-800">
                        <form onSubmit={handleActionSubmit} className="space-y-3">
                            <div className="flex items-center space-x-2">
                                <CommandLineIcon className="w-5 h-5 text-purple-400" />
                                <span className="font-medium text-white">–ò–≥—Ä–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ</span>
                                {/* ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –µ—Å–ª–∏ –µ—Å—Ç—å */}
                                {currentUserCharacter && (
                                    <span className="text-sm text-gray-400">
                                        ({currentUserCharacter.name})
                                    </span>
                                )}
                            </div>
                            <div className="flex space-x-2">
                                <input
                                    type="text"
                                    value={actionInput}
                                    onChange={(e) => setActionInput(e.target.value)}
                                    placeholder={currentUserCharacter ?
                                        `–ß—Ç–æ –¥–µ–ª–∞–µ—Ç ${currentUserCharacter.name}?` :
                                        "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂?"
                                    }
                                    className="flex-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                                    disabled={!isConnected}
                                />
                                <Button
                                    type="submit"
                                    variant="magic"
                                    disabled={!actionInput.trim() || !isConnected}
                                >
                                    <PaperAirplaneIcon className="w-4 h-4" />
                                </Button>
                            </div>
                            <p className="text-xs text-gray-400">
                                üí° –û–ø–∏—à–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ò–ò –ú–∞—Å—Ç–µ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç –±—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏.
                            </p>
                        </form>
                    </div>
                </div>

                {/* Right Panel - Players & Chat */}
                <div className="w-80 bg-gray-800 border-l border-gray-700 flex flex-col">
                    {/* Tab Navigation */}
                    <div className="flex border-b border-gray-700">
                        <button
                            onClick={() => setActiveTab('players')}
                            className={`flex-1 px-4 py-2 text-sm font-medium ${
                                activeTab === 'players'
                                    ? 'text-blue-400 border-b-2 border-blue-400'
                                    : 'text-gray-400 hover:text-white'
                            }`}
                        >
                            <UsersIcon className="w-4 h-4 inline mr-2" />
                            –ò–≥—Ä–æ–∫–∏
                        </button>
                        <button
                            onClick={() => setActiveTab('chat')}
                            className={`flex-1 px-4 py-2 text-sm font-medium ${
                                activeTab === 'chat'
                                    ? 'text-blue-400 border-b-2 border-blue-400'
                                    : 'text-gray-400 hover:text-white'
                            }`}
                        >
                            <ChatBubbleLeftIcon className="w-4 h-4 inline mr-2" />
                            –ß–∞—Ç
                        </button>
                    </div>

                    {/* Tab Content */}
                    <div className="flex-1 overflow-hidden">
                        {activeTab === 'players' && (
                            <div className="p-4 space-y-3 overflow-y-auto">
                                <div className="flex items-center justify-between">
                                    <h3 className="font-medium text-white">
                                        –ò–≥—Ä–æ–∫–∏ ({actualPlayers.length})
                                    </h3>
                                    <Button
                                        variant="ghost"
                                        size="xs"
                                        onClick={() => setPlayersCollapsed(!playersCollapsed)}
                                    >
                                        {playersCollapsed ? (
                                            <ChevronDownIcon className="w-4 h-4" />
                                        ) : (
                                            <ChevronUpIcon className="w-4 h-4" />
                                        )}
                                    </Button>
                                </div>

                                {/* ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –û–ë–ù–û–í–õ–ï–ù–ù–´–ô PlayerCard —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π */}
                                {!playersCollapsed && (
                                    <div className="space-y-2">
                                        {actualPlayers.length > 0 ? (
                                            actualPlayers.map((player, index) => (
                                                <PlayerCard
                                                    key={player.user_id || player.id || index}
                                                    player={player}
                                                    isCurrentUser={player.user_id === user?.id || player.username === user?.username}
                                                    isOnline={player.is_online !== false}
                                                />
                                            ))
                                        ) : (
                                            <div className="text-center py-4">
                                                <UserIcon className="mx-auto h-8 w-8 text-gray-400 mb-2" />
                                                <p className="text-sm text-gray-400">
                                                    –ò–≥—Ä–æ–∫–∏ –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å
                                                </p>
                                            </div>
                                        )}
                                    </div>
                                )}

                                {/* ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ö–æ–¥–µ */}
                                {gameState?.turn_info?.current_player_id && (
                                    <div className="mt-4 p-2 bg-blue-900/20 rounded-lg border border-blue-700">
                                        <div className="flex items-center space-x-2">
                                            <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse" />
                                            <span className="text-sm text-blue-300">
                                                –•–æ–¥: {
                                                playersWithCharacters[gameState.turn_info.current_player_id]?.character_name ||
                                                playersWithCharacters[gameState.turn_info.current_player_id]?.username ||
                                                '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫'
                                            }
                                            </span>
                                        </div>
                                    </div>
                                )}

                                {/* ‚úÖ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ */}
                                {currentUserCharacter && (
                                    <div className="mt-4 p-3 bg-green-900/20 rounded-lg border border-green-700">
                                        <h4 className="text-sm font-medium text-green-300 mb-2">–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂</h4>
                                        <div className="space-y-1 text-xs text-gray-300">
                                            <div className="font-medium">{currentUserCharacter.name}</div>
                                            <div className="text-gray-400">
                                                {currentUserCharacter.race} {currentUserCharacter.character_class} {currentUserCharacter.level} —É—Ä.
                                            </div>
                                            {currentUserCharacter.current_hit_points !== undefined && (
                                                <div className="flex items-center space-x-1">
                                                    <HeartSolid className="w-3 h-3 text-red-400" />
                                                    <span>{currentUserCharacter.current_hit_points}/{currentUserCharacter.max_hit_points}</span>
                                                </div>
                                            )}
                                            {currentUserCharacter.armor_class && (
                                                <div className="flex items-center space-x-1">
                                                    <ShieldCheckSolid className="w-3 h-3 text-blue-400" />
                                                    <span>AC {currentUserCharacter.armor_class}</span>
                                                </div>
                                            )}
                                        </div>
                                    </div>
                                )}
                            </div>
                        )}

                        {activeTab === 'chat' && (
                            <div className="flex flex-col h-full">
                                {/* Chat Messages */}
                                <div className="flex-1 overflow-y-auto p-4 space-y-3">
                                    {chatMessages.length === 0 ? (
                                        <div className="text-center py-8">
                                            <ChatBubbleLeftIcon className="mx-auto h-8 w-8 text-gray-400 mb-2" />
                                            <p className="text-sm text-gray-400">
                                                –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
                                            </p>
                                        </div>
                                    ) : (
                                        chatMessages.map((message, index) => (
                                            <ChatMessage
                                                key={message.id || index}
                                                message={message}
                                                isCurrentUser={message.author === user?.username}
                                            />
                                        ))
                                    )}
                                    <div ref={chatEndRef} />
                                </div>

                                {/* Chat Input */}
                                <div className="border-t border-gray-700 p-3">
                                    <form onSubmit={handleChatSubmit} className="flex space-x-2">
                                        <input
                                            type="text"
                                            value={chatInput}
                                            onChange={(e) => setChatInput(e.target.value)}
                                            placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º..."
                                            className="flex-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
                                            disabled={!isConnected}
                                        />
                                        <Button
                                            type="submit"
                                            size="sm"
                                            disabled={!chatInput.trim() || !isConnected}
                                        >
                                            <PaperAirplaneIcon className="w-4 h-4" />
                                        </Button>
                                    </form>
                                    <p className="text-xs text-gray-500 mt-1">
                                        üí¨ –ß–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏
                                    </p>
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            </div>

            {/* Mobile Menu Overlay */}
            {isMobileMenuOpen && (
                <div className="fixed inset-0 bg-black bg-opacity-50 z-50 lg:hidden">
                    <div className="absolute right-0 top-0 h-full w-80 bg-gray-800 shadow-xl">
                        <div className="p-4">
                            <div className="flex items-center justify-between mb-4">
                                <h3 className="font-medium text-white">–ò–≥—Ä–æ–∫–∏</h3>
                                <Button
                                    variant="ghost"
                                    size="sm"
                                    onClick={() => setIsMobileMenuOpen(false)}
                                >
                                    ‚úï
                                </Button>
                            </div>
                            <div className="space-y-2">
                                {actualPlayers.map((player, index) => (
                                    <PlayerCard
                                        key={player.user_id || player.id || index}
                                        player={player}
                                        isCurrentUser={player.user_id === user?.id || player.username === user?.username}
                                        isOnline={player.is_online !== false}
                                    />
                                ))}
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default GamePage;