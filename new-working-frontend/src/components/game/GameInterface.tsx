import React, { useState } from 'react';
import { Send, MessageSquare, Dice6 } from 'lucide-react';

// –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
const GameInterface = () => {
    const [actionInput, setActionInput] = useState('');
    const [chatInput, setChatInput] = useState('');
    const [messages, setMessages] = useState([]);
    const [isLoadingInitialScene, setIsLoadingInitialScene] = useState(true);
    const [campaignInfo, setCampaignInfo] = useState({
        name: '–ó–∞–≥—Ä—É–∑–∫–∞...',
        setting: 'unknown',
        aiStyle: 'balanced'
    });

    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—é–∂–µ—Ç–∞ –æ—Ç –ò–ò
    React.useEffect(() => {
        const generateInitialScene = async () => {
            setIsLoadingInitialScene(true);

            // –°–∏–º—É–ª—è—Ü–∏—è API –≤—ã–∑–æ–≤–∞ –∫ backend –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—é–∂–µ—Ç–∞
            setTimeout(() => {
                const generatedScenes = [
                    {
                        scene: "–í—ã —Å—Ç–æ–∏—Ç–µ –Ω–∞ –∫—Ä–∞—é –ü—Ä–æ–∫–ª—è—Ç–æ–≥–æ –ª–µ—Å–∞ –≠–ª—å–≤–µ–Ω–¥–∞–ª. –ú–µ—Ä—Ç–≤—ã–µ –¥–µ—Ä–µ–≤—å—è —Å–∫—Ä–∏–ø—è—Ç –Ω–∞ –≤–µ—Ç—Ä—É, –∞ –º–µ–∂–¥—É —Å—Ç–≤–æ–ª–æ–≤ –º–µ–ª—å–∫–∞—é—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–µ –æ–≥–æ–Ω—å–∫–∏. –í–æ–∑–¥—É—Ö –ø—Ä–æ–ø–∏—Ç–∞–Ω –∑–∞–ø–∞—Ö–æ–º —Å–µ—Ä—ã –∏ –≥–Ω–∏—é—â–∏—Ö –ª–∏—Å—Ç—å–µ–≤. –í–¥–∞–ª–µ–∫–µ –≤–∏–¥–Ω–µ–µ—Ç—Å—è —Ä–∞–∑—Ä—É—à–µ–Ω–Ω–∞—è –±–∞—à–Ω—è –≤–æ–ª—à–µ–±–Ω–∏–∫–∞. –ß—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ?",
                        setting: "–¢–µ–º–Ω–æ–µ —Ñ—ç–Ω—Ç–µ–∑–∏"
                    },
                    {
                        scene: "–¢–æ—Ä–≥–æ–≤—ã–π –∫–∞—Ä–∞–≤–∞–Ω –≤–Ω–µ–∑–∞–ø–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è. –í–ø–µ—Ä–µ–¥–∏ –¥–æ—Ä–æ–≥—É –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∏–ª –æ–≥—Ä–æ–º–Ω—ã–π –æ–ø–æ–ª–∑–µ–Ω—å, –∞ –≤ –≤–æ–∑–¥—É—Ö–µ —Å–ª—ã—à–Ω—ã –∫—Ä–∏–∫–∏ —Ö–∏—â–Ω—ã—Ö –ø—Ç–∏—Ü. –¢–æ—Ä–≥–æ–≤–µ—Ü –Ω–µ—Ä–≤–Ω–æ –æ–≥–ª—è–¥—ã–≤–∞–µ—Ç—Å—è –∏ —à–µ–ø—á–µ—Ç –æ –±–∞–Ω–¥–∏—Ç–∞—Ö –≤ —ç—Ç–∏—Ö –∫—Ä–∞—è—Ö. –°–æ–ª–Ω—Ü–µ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–∞–¥–∏—Ç—å—Å—è. –ß—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ?",
                        setting: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Ñ—ç–Ω—Ç–µ–∑–∏"
                    },
                    {
                        scene: "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ —à–µ—Å—Ç–µ—Ä–µ–Ω–∫–∏ –≥—Ä–æ–º–∫–æ —â–µ–ª–∫–∞—é—Ç –≤ —Å—Ç–µ–Ω–∞—Ö –ø–æ–¥–∑–µ–º–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≥–Ω–æ–º–æ–≤. –ü–∞—Ä–æ–≤—ã–µ —Ç—Ä—É–±—ã —à–∏–ø—è—Ç, –≤—ã–ø—É—Å–∫–∞—è –≥–æ—Ä—è—á–∏–π –ø–∞—Ä. –ú–µ—Å—Ç–Ω—ã–π –∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å –≤–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–Ω–æ –º–∞—à–µ—Ç —Ä—É–∫–∞–º–∏, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—è –æ –ø—Ä–æ–ø–∞–≤—à–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–µ. –ï–≥–æ –º–∞—Å—Ç–µ—Ä—Å–∫–∞—è —Ä–∞–∑–≥—Ä–æ–º–ª–µ–Ω–∞. –ß—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ?",
                        setting: "–°—Ç–∏–º–ø–∞–Ω–∫ —Ñ—ç–Ω—Ç–µ–∑–∏"
                    }
                ];

                const randomScene = generatedScenes[Math.floor(Math.random() * generatedScenes.length)];

                setCampaignInfo({
                    name: `–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è ${randomScene.setting}`,
                    setting: randomScene.setting,
                    aiStyle: 'dramatic'
                });

                setMessages([
                    {
                        id: '1',
                        type: 'system',
                        content: `üé≤ –ò–ò –ú–∞—Å—Ç–µ—Ä –ø–æ–¥–∑–µ–º–µ–ª–∏–π —Å–æ–∑–¥–∞–ª –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—é–∂–µ—Ç –¥–ª—è –≤–∞—à–µ–π –∫–∞–º–ø–∞–Ω–∏–∏ "${randomScene.setting}"`,
                        sender: '–°–∏—Å—Ç–µ–º–∞ –ò–ò',
                        timestamp: new Date().toISOString()
                    },
                    {
                        id: '2',
                        type: 'ai_dm',
                        content: randomScene.scene,
                        sender: '–ò–ò –ú–∞—Å—Ç–µ—Ä –ø–æ–¥–∑–µ–º–µ–ª–∏–π',
                        timestamp: new Date().toISOString()
                    }
                ]);

                setIsLoadingInitialScene(false);
            }, 2000);
        };

        generateInitialScene();
    }, []);

    const handleActionSubmit = () => {
        if (!actionInput.trim()) return;

        const newMessage = {
            id: Date.now().toString(),
            type: 'action',
            content: actionInput,
            sender: '–í—ã',
            timestamp: new Date().toISOString()
        };

        setMessages([...messages, newMessage]);
        setActionInput('');
    };

    const handleChatSubmit = () => {
        if (!chatInput.trim()) return;

        const newMessage = {
            id: Date.now().toString(),
            type: 'chat',
            content: chatInput,
            sender: '–í—ã',
            timestamp: new Date().toISOString()
        };

        setMessages([...messages, newMessage]);
        setChatInput('');
    };

    const handleKeyPress = (e, handler) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handler();
        }
    };

    const getMessageStyle = (type) => {
        switch (type) {
            case 'system':
                return 'bg-blue-100 dark:bg-blue-900/30 border-blue-200 dark:border-blue-700';
            case 'ai_dm':
                return 'bg-purple-100 dark:bg-purple-900/30 border-purple-200 dark:border-purple-700';
            case 'action':
                return 'bg-green-100 dark:bg-green-900/30 border-green-200 dark:border-green-700';
            case 'chat':
                return 'bg-gray-100 dark:bg-gray-800 border-gray-200 dark:border-gray-700';
            default:
                return 'bg-gray-100 dark:bg-gray-800 border-gray-200 dark:border-gray-700';
        }
    };

    const quickActions = [
        '–û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è',
        '–ü—Ä–∏—Å–ª—É—à–∞—Ç—å—Å—è',
        '–û—Å—Ç–æ—Ä–æ–∂–Ω–æ –≤–æ–π—Ç–∏',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ª–æ–≤—É—à–∫–∏',
        '–ó–∞–∂–µ—á—å —Ñ–∞–∫–µ–ª',
        '–ì–æ—Ç–æ–≤–∏—Ç—å –æ—Ä—É–∂–∏–µ'
    ];

    return (
        <div className="h-screen bg-gray-900 text-white flex flex-col">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–≥—Ä—ã */}
            <div className="bg-gray-800 border-b border-gray-700 p-4">
                <div className="flex items-center justify-between">
                    <h1 className="text-xl font-bold">{campaignInfo.name}</h1>
                    <div className="flex items-center space-x-2 text-sm">
                        {isLoadingInitialScene ? (
                            <div className="flex items-center text-yellow-400">
                                <div className="w-2 h-2 bg-yellow-400 rounded-full animate-pulse mr-2"></div>
                                <span>–ò–ò —Å–æ–∑–¥–∞—ë—Ç —Å—é–∂–µ—Ç...</span>
                            </div>
                        ) : (
                            <div className="flex items-center text-green-400">
                                <div className="w-2 h-2 bg-green-400 rounded-full mr-2"></div>
                                <span>–ò–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚Ä¢ {campaignInfo.setting}</span>
                            </div>
                        )}
                    </div>
                </div>
            </div>

            <div className="flex-1 flex">
                {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä—ã */}
                <div className="flex-1 flex flex-col">
                    {/* –õ–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π */}
                    <div className="flex-1 overflow-y-auto p-4 space-y-3">
                        {isLoadingInitialScene ? (
                            <div className="flex items-center justify-center h-full">
                                <div className="text-center">
                                    <div className="animate-spin rounded-full h-12 w-12 border-4 border-purple-500 border-t-transparent mx-auto mb-4"></div>
                                    <h3 className="text-lg font-semibold text-white mb-2">ü§ñ –ò–ò –ú–∞—Å—Ç–µ—Ä –ø–æ–¥–∑–µ–º–µ–ª–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç</h3>
                                    <p className="text-gray-400 text-sm">–°–æ–∑–¥–∞—ë—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—é–∂–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∞—à–µ–π –∫–∞–º–ø–∞–Ω–∏–∏...</p>
                                    <div className="mt-3 text-xs text-gray-500">
                                        ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç—Ç–∏–Ω–≥–∞ –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π<br/>
                                        ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–∫–∞—Ü–∏–π –∏ –∫–≤–µ—Å—Ç–æ–≤<br/>
                                        ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–≥–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è
                                    </div>
                                </div>
                            </div>
                        ) : (
                            messages.map((message) => (
                                <div
                                    key={message.id}
                                    className={`p-3 rounded-lg border ${getMessageStyle(message.type)} text-gray-900 dark:text-gray-100`}
                                >
                                    <div className="flex items-center justify-between mb-1">
                                        <span className="font-semibold text-sm">
                                            {message.sender}
                                        </span>
                                        <span className="text-xs opacity-60">
                                            {new Date(message.timestamp).toLocaleTimeString()}
                                        </span>
                                    </div>
                                    <p className="text-sm">{message.content}</p>
                                </div>
                            ))
                        )}
                    </div>

                    {/* –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞ –¥–µ–π—Å—Ç–≤–∏–π */}
                    <div className="border-t border-gray-700 bg-gray-800 p-4">
                        <div className="space-y-3">
                            <div>
                                <label className="block text-sm font-medium text-gray-300 mb-2">
                                    –í–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ:
                                </label>
                                <div className="flex space-x-2">
                                    <textarea
                                        value={actionInput}
                                        onChange={(e) => setActionInput(e.target.value)}
                                        onKeyPress={(e) => handleKeyPress(e, handleActionSubmit)}
                                        placeholder={isLoadingInitialScene ? "–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—é–∂–µ—Ç–∞..." : "–û–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å..."}
                                        disabled={isLoadingInitialScene}
                                        className="flex-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 resize-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:opacity-50 disabled:cursor-not-allowed"
                                        rows={2}
                                    />
                                    <button
                                        onClick={handleActionSubmit}
                                        disabled={!actionInput.trim() || isLoadingInitialScene}
                                        className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed focus:outline-none focus:ring-2 focus:ring-blue-500"
                                    >
                                        <Send className="w-5 h-5" />
                                    </button>
                                </div>
                            </div>

                            {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
                            <div>
                                <label className="block text-sm font-medium text-gray-300 mb-2">
                                    –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
                                </label>
                                <div className="flex flex-wrap gap-2">
                                    {quickActions.map((action, index) => (
                                        <button
                                            key={index}
                                            onClick={() => setActionInput(action)}
                                            className="px-3 py-1 text-sm bg-gray-600 text-white border border-gray-500 rounded-md hover:bg-gray-500 hover:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
                                        >
                                            {action}
                                        </button>
                                    ))}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å */}
                <div className="w-80 border-l border-gray-700 bg-gray-800 flex flex-col">
                    {/* –ß–∞—Ç –∏–≥—Ä–æ–∫–æ–≤ */}
                    <div className="flex-1 flex flex-col">
                        <div className="p-3 border-b border-gray-700">
                            <h3 className="font-semibold flex items-center">
                                <MessageSquare className="w-5 h-5 mr-2" />
                                –ß–∞—Ç –∏–≥—Ä–æ–∫–æ–≤
                            </h3>
                        </div>

                        <div className="flex-1 overflow-y-auto p-3 space-y-2">
                            <div className="p-2 rounded bg-gray-700 text-white">
                                <div className="text-xs text-gray-300 mb-1">–ò–≥—Ä–æ–∫1</div>
                                <div className="text-sm">–ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é!</div>
                            </div>
                            <div className="p-2 rounded bg-gray-700 text-white">
                                <div className="text-xs text-gray-300 mb-1">–ò–≥—Ä–æ–∫2</div>
                                <div className="text-sm">–ü—Ä–æ–≤–µ—Ä–∏–º –ª–æ–≤—É—à–∫–∏ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º</div>
                            </div>
                        </div>

                        {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ —á–∞—Ç–∞ */}
                        <div className="p-3 border-t border-gray-700">
                            <div className="flex space-x-2">
                                <input
                                    type="text"
                                    value={chatInput}
                                    onChange={(e) => setChatInput(e.target.value)}
                                    onKeyPress={(e) => handleKeyPress(e, handleChatSubmit)}
                                    placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ..."
                                    className="flex-1 px-3 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                />
                                <button
                                    onClick={handleChatSubmit}
                                    disabled={!chatInput.trim()}
                                    className="px-3 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                >
                                    <Send className="w-4 h-4" />
                                </button>
                            </div>
                        </div>
                    </div>

                    {/* –ü–∞–Ω–µ–ª—å –∫—É–±–∏–∫–æ–≤ */}
                    <div className="border-t border-gray-700 p-3">
                        <h4 className="font-semibold mb-2 flex items-center">
                            <Dice6 className="w-5 h-5 mr-2" />
                            –ë—Ä–æ—Å–∫–∏ –∫—É–±–∏–∫–æ–≤
                        </h4>
                        <div className="grid grid-cols-3 gap-2">
                            {['d4', 'd6', 'd8', 'd10', 'd12', 'd20'].map((dice) => (
                                <button
                                    key={dice}
                                    className="px-2 py-1 text-sm bg-red-600 text-white rounded hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500"
                                    onClick={() => setActionInput(`–ë—Ä–æ—Å–æ–∫ ${dice}`)}
                                >
                                    {dice}
                                </button>
                            ))}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default GameInterface;